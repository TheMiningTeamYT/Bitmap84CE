	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_stringToUpper
_stringToUpper:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 9
	ld	sp, hl
	ld	hl, (ix + 6)
	push	hl
	call	_strlen
	pop	de
	inc	hl
	ld	de, 1
	push	de
	push	hl
	call	_calloc
	ld	iy, (ix + 6)
	push	hl
	pop	bc
	ld	hl, 6
	add	hl, sp
	ld	sp, hl
	ld	e, (iy)
	ld	a, e
	rlc	a
	sbc	hl, hl
	ld	a, e
	or	a, a
	jr	z, BB0_3
	ld	l, e
	inc	iy
	ld	(ix - 3), bc
	ld	(ix - 9), bc
BB0_2:
	ld	(ix - 6), iy
	push	hl
	call	_toupper
	ld	bc, (ix - 9)
	ld	iy, (ix - 6)
	pop	de
	ld	a, l
	ld	hl, (ix - 3)
	ld	(hl), a
	ex	de, hl
	ld	a, (iy)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	inc	de
	ld	(ix - 3), de
	inc	iy
	or	a, a
	jr	nz, BB0_2
BB0_3:
	push	bc
	pop	hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_handleUsbEvent
_handleUsbEvent:
	push	ix
	ld	ix, 0
	add	ix, sp
	push	hl
	ld	de, (ix + 6)
	ld	iy, 0
	dec	de
	ld	bc, 4
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jr	nc, BB1_6
	ld	hl, (ix + 9)
	ld	(ix - 3), hl
	ld	bc, (ix + 12)
	ld	hl, 100
	ld	iy, JTI1_0
	add	iy, de
	add	iy, de
	add	iy, de
	ld	iy, (iy)
	jp	(iy)
BB1_2:
	push	bc
	pop	iy
	ld	hl, (iy)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB1_4
	ld	de, 1795
	push	bc
	pop	hl
	add	hl, de
	ld	(hl), 0
BB1_4:
	ld	hl, 0
	ld	(ix - 3), hl
BB1_5:
	push	bc
	pop	hl
	ld	de, (ix - 3)
	ld	(hl), de
	ld	iy, 0
BB1_6:
	lea	hl, iy
BB1_7:
	ld	sp, ix
	pop	ix
	ret
BB1_8:
	ld	hl, (ix + 9)
	push	hl
	call	_usb_ResetDevice
	pop	de
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits
	section	.rodata,"a",@progbits
	private	JTI1_0
JTI1_0:
	dl	BB1_2
	dl	BB1_8
	dl	BB1_7
	dl	BB1_5

	section	.text,"ax",@progbits
	public	_init_USB
_init_USB:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 14
	ld	sp, hl
	ld	iy, _global
	xor	a, a
	ld	(_global), a
	lea	de, iy
	inc	de
	ld	bc, 1796
	lea	hl, iy
	ldir
	ld	hl, 36106
	push	hl
	ld	hl, 0
	push	hl
	push	iy
	ld	hl, _handleUsbEvent
	push	hl
	call	_usb_Init
	push	hl
	pop	de
	ld	hl, 12
	add	hl, sp
	ld	sp, hl
BB2_1:
	ld	hl, (_global)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB2_5
	ex	de, hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	nz, BB2_11
	call	_os_GetCSC
	or	a, a
	jp	nz, BB2_11
	call	_usb_WaitForInterrupt
	push	hl
	pop	de
	jr	BB2_1
BB2_5:
	ld	de, _global+3
	push	hl
	push	de
	call	_msd_Open
	ld	iy, 6
	add	iy, sp
	ld	sp, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	nz, BB2_11
	ld	a, 1
	ld	(_global+1795), a
	pea	ix - 8
	ld	hl, _global+3
	push	hl
	call	_msd_Info
	ld	iy, 6
	add	iy, sp
	ld	sp, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB2_11
	ld	de, _partitions
	ld	hl, 32
	push	hl
	ld	(ix - 11), de
	push	de
	ld	hl, _global+3
	push	hl
	call	_msd_FindPartitions
	ld	e, a
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	or	a, a
	jr	z, BB2_11
	ld	bc, _msd_Write
	or	a, a
	sbc	hl, hl
	ld	l, e
	ld	(ix - 14), hl
BB2_9:
	ld	iy, (ix - 11)
	ld	hl, (iy)
	ld	(ix - 11), iy
	ld	e, (iy + 3)
	push	de
	push	hl
	ld	hl, _global+3
	push	hl
	push	bc
	ld	hl, _msd_Read
	push	hl
	ld	hl, _global+1027
	push	hl
	call	_fat_Open
	ld	iy, 18
	add	iy, sp
	ld	sp, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB2_12
	ld	iy, (ix - 11)
	lea	iy, iy + 8
	ld	(ix - 11), iy
	ld	hl, (ix - 14)
	dec	hl
	ld	(ix - 14), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	bc, _msd_Write
	jr	nz, BB2_9
BB2_11:
	call	_usb_Cleanup
	xor	a, a
	ld	sp, ix
	pop	ix
	ret
BB2_12:
	ld	a, 1
	ld	(_global+1796), a
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_openFile
_openFile:
	push	ix
	ld	ix, 0
	add	ix, sp
	ld	hl, -284
	add	hl, sp
	ld	sp, hl
	ld	bc, -266
	lea	hl, ix
	add	hl, bc
	ld	bc, -281
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	hl, (ix + 6)
	push	hl
	call	_strlen
	pop	de
	inc	hl
	ld	de, 1
	push	de
	push	hl
	call	_calloc
	ld	iy, (ix + 6)
	push	ix
	ld	bc, -272
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	hl, 6
	add	hl, sp
	ld	sp, hl
	ld	e, (iy)
	ld	a, e
	rlc	a
	sbc	hl, hl
	ld	a, e
	or	a, a
	jr	z, BB3_3
	ld	l, e
	inc	iy
	push	ix
	ld	bc, -272
	add	ix, bc
	ld	de, (ix)
	pop	ix
	push	ix
	ld	bc, -269
	add	ix, bc
	ld	(ix), de
	pop	ix
BB3_2:
	push	ix
	ld	bc, -275
	add	ix, bc
	ld	(ix), iy
	pop	ix
	push	hl
	call	_toupper
	ld	bc, -275
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	pop	de
	ld	a, l
	ld	bc, -269
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	(hl), a
	ex	de, hl
	ld	a, (iy)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	inc	iy
	inc	de
	push	ix
	add	ix, bc
	ld	(ix), de
	pop	ix
	or	a, a
	jr	nz, BB3_2
BB3_3:
	ld	bc, -281
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	lea	hl, iy + 4
	ld	bc, -269
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	hl, (ix + 9)
	push	hl
	call	_strlen
	pop	de
	inc	hl
	ld	de, 1
	push	de
	push	hl
	call	_calloc
	ld	iy, (ix + 9)
	push	ix
	ld	bc, -275
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	hl, 6
	add	hl, sp
	ld	sp, hl
	ld	e, (iy)
	ld	a, e
	rlc	a
	sbc	hl, hl
	ld	a, e
	or	a, a
	jr	z, BB3_6
	ld	l, e
	inc	iy
	push	ix
	ld	bc, -275
	add	ix, bc
	ld	de, (ix)
	pop	ix
	push	ix
	ld	bc, -278
	add	ix, bc
	ld	(ix), de
	pop	ix
BB3_5:
	push	ix
	ld	bc, -284
	add	ix, bc
	ld	(ix), iy
	pop	ix
	push	hl
	call	_toupper
	ld	bc, -284
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	pop	de
	ld	a, l
	ld	bc, -278
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	(hl), a
	ex	de, hl
	ld	a, (iy)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	inc	iy
	inc	de
	push	ix
	add	ix, bc
	ld	(ix), de
	pop	ix
	or	a, a
	jr	nz, BB3_5
BB3_6:
	call	_usb_WaitForEvents
	ld	hl, 64
	push	hl
	ld	hl, 1
	push	hl
	call	_calloc
	ld	bc, -278
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	hl, 6
	add	hl, sp
	ld	sp, hl
	ld	hl, 256
	push	hl
	ld	bc, -272
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -269
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_strncpy
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	(ix - 7), 0
	ld	bc, -269
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_strlen
	push	hl
	pop	de
	pop	hl
	ld	bc, -269
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	pop	iy
	add	iy, de
	ld	a, (iy - 1)
	cp	a, 47
	jr	z, BB3_8
	push	hl
	call	_strlen
	push	hl
	pop	de
	pop	hl
	ld	bc, -269
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, de
	ld.sis	de, 47
	ld	(hl), e
	inc	hl
	ld	(hl), d
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
BB3_8:
	push	hl
	call	_strlen
	push	hl
	pop	de
	pop	hl
	ld	hl, 256
	or	a, a
	sbc	hl, de
	push	hl
	ld	bc, -275
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -269
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_strncat
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	(ix - 7), 0
	ld	bc, -272
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_free
	pop	hl
	ld	bc, -275
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_free
	pop	hl
	bit	0, (ix + 12)
	jr	z, BB3_10
	or	a, a
	sbc	hl, hl
	push	hl
	ld	bc, -275
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -272
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	hl, _global+1027
	push	hl
	call	_fat_Create
	ld	iy, 12
	add	iy, sp
	ld	sp, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	nz, BB3_14
BB3_10:
	ld	bc, -278
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	bc, -269
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	hl, _global+1027
	push	hl
	call	_fat_OpenFile
	ld	iy, 12
	add	iy, sp
	ld	sp, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	nz, BB3_14
	ld	bc, -281
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	lea	hl, iy
	ld	bc, -269
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	push	hl
	call	_time
	pop	hl
	ld	bc, -269
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_localtime
	pop	de
	ld	de, -278
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	ld	iy, (iy + 40)
	push	ix
	ld	de, -269
	add	ix, de
	ld	(ix), iy
	pop	ix
	ld	(iy + 11), 32
	ld	(iy + 13), 0
	push	hl
	pop	iy
	ld	hl, (iy)
	ld	c, 1
	call	__ishru
	push	ix
	ld	de, -272
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	hl, (iy + 3)
	lea	de, iy
	ld	a, 5
	ld	c, a
	call	__ishl
	ld	(ix - 3), de
	push	ix
	ld	de, -272
	add	ix, de
	ld	bc, (ix)
	pop	ix
	add	hl, bc
	push	ix
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	hl, (iy + 6)
	ld	c, 11
	call	__ishl
	push	hl
	pop	bc
	lea	iy, ix
	add	iy, de
	ld	hl, (iy)
	add	hl, bc
	push	ix
	ld	bc, -269
	add	ix, bc
	ld	iy, (ix)
	pop	ix
	push	ix
	ld	bc, -281
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	(iy + 22), l
	ld	(iy + 23), h
	ld	de, (ix - 3)
	push	de
	pop	iy
	ld	hl, (iy + 9)
	push	ix
	ld	bc, -272
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	hl, (iy + 12)
	ld	c, a
	call	__ishl
	ld	(ix - 3), de
	push	ix
	ld	de, -275
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	hl, (iy + 15)
	ld	c, 9
	call	__ishl
	push	hl
	pop	bc
	ld	de, (ix - 3)
	ld	de, 24608
	ld	(ix - 3), bc
	ld	bc, -272
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	add	hl, de
	push	ix
	ld	bc, -275
	add	ix, bc
	ld	de, (ix)
	pop	ix
	add	hl, de
	ld	bc, (ix - 3)
	add	hl, bc
	push	ix
	ld	bc, -269
	add	ix, bc
	ld	iy, (ix)
	pop	ix
	ld	(iy + 24), l
	ld	(iy + 25), h
	ld	(iy + 18), l
	ld	(iy + 19), h
	bit	0, (ix + 12)
	jr	z, BB3_13
	push	ix
	ld	bc, -281
	add	ix, bc
	ld	de, (ix)
	pop	ix
	ld	(iy + 14), e
	ld	(iy + 15), d
	ld	(iy + 16), l
	ld	(iy + 17), h
BB3_13:
	ld	bc, -278
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	sp, ix
	pop	ix
	ret
BB3_14:
	ld	bc, -278
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_free
	pop	hl
	ld	hl, 0
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_closeFile
_closeFile:
	push	ix
	ld	ix, 0
	add	ix, sp
	ld	hl, (ix + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB4_2
	call	_usb_WaitForEvents
	ld	hl, (ix + 6)
	push	hl
	call	_fat_CloseFile
	pop	hl
	ld	hl, (ix + 6)
	push	hl
	call	_free
	pop	hl
BB4_2:
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_readFile
_readFile:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 4
	ld	sp, hl
	ld	hl, (ix + 6)
	xor	a, a
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB5_7
	push	hl
	call	_fat_GetFileSize
	push	hl
	pop	iy
	pop	hl
	ld	hl, (ix + 9)
	ld	bc, -512
	call	__iand
	push	hl
	pop	bc
	ld	d, 0
	lea	hl, iy
	ld	a, d
	call	__lcmpu
	ccf
	sbc	a, a
	inc	a
	bit	0, a
	jr	nz, BB5_3
	push	bc
	pop	iy
BB5_3:
	ld	bc, 511
	bit	0, a
	jr	nz, BB5_5
	ld	e, d
BB5_5:
	lea	hl, iy
	xor	a, a
	call	__ladd
	push	hl
	pop	bc
	ld	a, e
	ld	l, 9
	call	__lshru
	ld	(ix - 4), bc
	ld	(ix - 1), a
	ld	hl, (ix + 12)
	push	hl
	push	bc
	ld	hl, (ix + 6)
	push	hl
	call	_fat_ReadFile
	push	hl
	pop	bc
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix - 4)
	ld	e, (ix - 1)
	xor	a, a
	call	__lcmpu
	jr	z, BB5_8
	ld	a, 0
BB5_7:
	ld	sp, ix
	pop	ix
	ret
BB5_8:
	ld	a, -1
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_writeFile
_writeFile:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 16
	ld	sp, hl
	ld	hl, (ix + 6)
	xor	a, a
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB6_6
	ld	bc, (ix + 9)
	ld	de, 0
	push	de
	push	bc
	push	hl
	call	_fat_SetFileSize
	xor	a, a
	ld	iy, 9
	add	iy, sp
	ld	sp, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	nz, BB6_6
	ld	de, (ix + 12)
	ld	bc, 511
	lea	hl, ix - 4
	ld	(ix - 7), hl
	ld	hl, (ix + 9)
	add	hl, bc
	ld	c, 9
	call	__ishru
	ld	(ix - 10), hl
	push	de
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_fat_WriteFile
	ld	iy, 9
	add	iy, sp
	ld	sp, iy
	ld	de, (ix - 10)
	or	a, a
	sbc	hl, de
	jr	z, BB6_4
	ld	a, 0
	jr	BB6_5
BB6_4:
	ld	a, -1
BB6_5:
	ld	(ix - 10), a
	ld	hl, (ix - 7)
	push	hl
	call	_time
	pop	hl
	ld	hl, (ix - 7)
	push	hl
	call	_localtime
	pop	de
	ld	iy, (ix + 6)
	ld	iy, (iy + 40)
	ld	(ix - 7), iy
	ld	(iy + 11), 32
	push	hl
	pop	iy
	ld	hl, (iy)
	ld	c, 1
	call	__ishru
	ld	(ix - 13), hl
	ld	hl, (iy + 3)
	lea	de, iy
	ld	a, 5
	ld	c, a
	call	__ishl
	ld	bc, (ix - 13)
	add	hl, bc
	ld	(ix - 13), hl
	ld	hl, (iy + 6)
	ld	c, 11
	call	__ishl
	push	hl
	pop	bc
	ld	hl, (ix - 13)
	add	hl, bc
	ld	iy, (ix - 7)
	ld	(iy + 22), l
	ld	(iy + 23), h
	push	de
	pop	iy
	ld	hl, (iy + 9)
	ld	(ix - 13), hl
	ld	hl, (iy + 12)
	ld	c, a
	call	__ishl
	ld	(ix - 16), hl
	ld	hl, (iy + 15)
	ld	c, 9
	call	__ishl
	push	hl
	pop	bc
	ld	de, 24608
	ld	hl, (ix - 13)
	add	hl, de
	ld	de, (ix - 16)
	add	hl, de
	add	hl, bc
	ld	iy, (ix - 7)
	ld	(iy + 24), l
	ld	(iy + 25), h
	ld	(iy + 18), l
	ld	(iy + 19), h
	ld	a, (ix - 10)
BB6_6:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_createDirectory
_createDirectory:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 12
	ld	sp, hl
	ld	hl, (ix + 6)
	push	hl
	call	_strlen
	pop	de
	inc	hl
	ld	de, 1
	push	de
	push	hl
	call	_calloc
	ld	iy, (ix + 6)
	ld	(ix - 3), hl
	ld	hl, 6
	add	hl, sp
	ld	sp, hl
	ld	e, (iy)
	ld	a, e
	rlc	a
	sbc	hl, hl
	ld	a, e
	or	a, a
	jr	z, BB7_3
	ld	l, e
	inc	iy
	ld	de, (ix - 3)
	ld	(ix - 6), de
BB7_2:
	ld	(ix - 9), iy
	push	hl
	call	_toupper
	ld	iy, (ix - 9)
	pop	de
	ld	a, l
	ld	hl, (ix - 6)
	ld	(hl), a
	ex	de, hl
	ld	a, (iy)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	inc	iy
	inc	de
	ld	(ix - 6), de
	or	a, a
	jr	nz, BB7_2
BB7_3:
	ld	hl, (ix + 9)
	push	hl
	call	_strlen
	pop	de
	inc	hl
	ld	de, 1
	push	de
	push	hl
	call	_calloc
	ld	iy, (ix + 9)
	ld	(ix - 6), hl
	ld	hl, 6
	add	hl, sp
	ld	sp, hl
	ld	e, (iy)
	ld	a, e
	rlc	a
	sbc	hl, hl
	ld	a, e
	or	a, a
	jr	z, BB7_6
	ld	l, e
	inc	iy
	ld	de, (ix - 6)
	ld	(ix - 9), de
BB7_5:
	ld	(ix - 12), iy
	push	hl
	call	_toupper
	ld	iy, (ix - 12)
	pop	de
	ld	a, l
	ld	hl, (ix - 9)
	ld	(hl), a
	ex	de, hl
	ld	a, (iy)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	inc	iy
	inc	de
	ld	(ix - 9), de
	or	a, a
	jr	nz, BB7_5
BB7_6:
	call	_usb_WaitForEvents
	ld	hl, 16
	push	hl
	ld	hl, (ix - 6)
	push	hl
	ld	hl, (ix - 3)
	push	hl
	ld	hl, _global+1027
	push	hl
	call	_fat_Create
	ld	(ix - 9), hl
	ld	hl, 12
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix - 3)
	push	hl
	call	_free
	pop	hl
	ld	hl, (ix - 6)
	push	hl
	call	_free
	ld	hl, (ix - 9)
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	e, -1
	ld	d, 0
	ld	a, e
	jr	nz, BB7_9
	ld	bc, 5
	or	a, a
	sbc	hl, bc
	jr	nz, BB7_10
BB7_8:
	or	a, e
	ld	sp, ix
	pop	ix
	ret
BB7_9:
	ld	a, d
	ld	bc, 5
	or	a, a
	sbc	hl, bc
	jr	z, BB7_8
BB7_10:
	ld	e, d
	or	a, e
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_getSizeOf
_getSizeOf:
	push	ix
	ld	ix, 0
	add	ix, sp
	ld	hl, (ix + 6)
	ld	de, 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	push	hl
	ex	de, hl
	call	nz, _fat_GetFileSize
	pop	de
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_deleteFile
_deleteFile:
	push	ix
	ld	ix, 0
	add	ix, sp
	ld	hl, -277
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix + 6)
	push	hl
	call	_strlen
	pop	de
	inc	hl
	ld	de, 1
	push	de
	push	hl
	call	_calloc
	ld	iy, (ix + 6)
	push	ix
	ld	bc, -268
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	hl, 6
	add	hl, sp
	ld	sp, hl
	ld	e, (iy)
	ld	a, e
	rlc	a
	sbc	hl, hl
	ld	a, e
	or	a, a
	jr	z, BB9_3
	ld	l, e
	inc	iy
	push	ix
	ld	bc, -268
	add	ix, bc
	ld	de, (ix)
	pop	ix
	push	ix
	ld	bc, -265
	add	ix, bc
	ld	(ix), de
	pop	ix
BB9_2:
	push	ix
	ld	bc, -271
	add	ix, bc
	ld	(ix), iy
	pop	ix
	push	hl
	call	_toupper
	ld	bc, -271
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	pop	de
	ld	a, l
	ld	bc, -265
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	(hl), a
	ex	de, hl
	ld	a, (iy)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	inc	iy
	inc	de
	push	ix
	add	ix, bc
	ld	(ix), de
	pop	ix
	or	a, a
	jr	nz, BB9_2
BB9_3:
	ld	bc, -262
	lea	hl, ix
	add	hl, bc
	ld	bc, -265
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	hl, (ix + 9)
	push	hl
	call	_strlen
	pop	de
	inc	hl
	ld	de, 1
	push	de
	push	hl
	call	_calloc
	ld	iy, (ix + 9)
	push	ix
	ld	bc, -271
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	hl, 6
	add	hl, sp
	ld	sp, hl
	ld	e, (iy)
	ld	a, e
	rlc	a
	sbc	hl, hl
	ld	a, e
	or	a, a
	jr	z, BB9_6
	ld	l, e
	inc	iy
	push	ix
	ld	bc, -271
	add	ix, bc
	ld	de, (ix)
	pop	ix
	push	ix
	ld	bc, -274
	add	ix, bc
	ld	(ix), de
	pop	ix
BB9_5:
	push	ix
	ld	bc, -277
	add	ix, bc
	ld	(ix), iy
	pop	ix
	push	hl
	call	_toupper
	ld	bc, -277
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	pop	de
	ld	a, l
	ld	bc, -274
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	(hl), a
	ex	de, hl
	ld	a, (iy)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	inc	iy
	inc	de
	push	ix
	add	ix, bc
	ld	(ix), de
	pop	ix
	or	a, a
	jr	nz, BB9_5
BB9_6:
	call	_usb_WaitForEvents
	ld	hl, 256
	push	hl
	ld	bc, -268
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -265
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_strncpy
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	(ix - 7), 0
	ld	bc, -265
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_strlen
	push	hl
	pop	de
	pop	hl
	ld	bc, -265
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	pop	iy
	add	iy, de
	ld	a, (iy - 1)
	cp	a, 47
	jr	z, BB9_8
	ld	bc, _.str.2.6
	ld	hl, 256
	or	a, a
	sbc	hl, de
	push	hl
	push	bc
	ld	bc, -265
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_strncat
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	bc, -265
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
BB9_8:
	push	hl
	call	_strlen
	push	hl
	pop	de
	pop	hl
	ld	hl, 256
	or	a, a
	sbc	hl, de
	push	hl
	ld	bc, -271
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -265
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_strncat
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	bc, -265
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	hl, _global+1027
	push	hl
	call	_fat_Delete
	ld	hl, 6
	add	hl, sp
	ld	sp, hl
	ld	bc, -268
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_free
	pop	hl
	ld	bc, -271
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_free
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_close_USB
_close_USB:
	call	_usb_WaitForEvents
	ld	a, (_global+1796)
	bit	0, a
	jr	nz, BB10_3
	ld	a, (_global+1795)
	bit	0, a
	jr	nz, BB10_4
BB10_2:
	jp	_usb_Cleanup
BB10_3:
	ld	hl, _global+1027
	push	hl
	call	_fat_Close
	pop	hl
	ld	a, (_global+1795)
	bit	0, a
	jr	z, BB10_2
BB10_4:
	ld	hl, _global+3
	push	hl
	call	_msd_Close
	pop	hl
	jp	_usb_Cleanup
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	__Z13displayBitmapPKcS0_
__Z13displayBitmapPKcS0_:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 22
	ld	sp, hl
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	bc, 0
	push	bc
	push	de
	push	hl
	call	_openFile
	ld	iy, 9
	add	iy, sp
	ld	sp, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB11_2
	xor	a, a
	ld	sp, ix
	pop	ix
	ret
BB11_2:
	ld	de, 10240
	push	de
	ld	(ix - 3), hl
	call	__Znaj
	ld	(ix - 6), hl
	pop	hl
	ld	hl, (ix - 3)
	push	hl
	call	_fat_GetFileSize
	ld	bc, 10240
	pop	iy
	ld	d, c
	ld	a, d
	call	__lcmpu
	ccf
	sbc	a, a
	inc	a
	bit	0, a
	jr	nz, BB11_4
	push	bc
	pop	hl
BB11_4:
	ld	bc, 511
	bit	0, a
	jr	nz, BB11_6
	ld	e, d
BB11_6:
	ld	a, d
	call	__ladd
	push	hl
	pop	bc
	ld	a, e
	ld	l, 9
	call	__lshru
	ld	(ix - 12), bc
	ld	(ix - 9), a
	ld	hl, (ix - 6)
	push	hl
	push	bc
	ld	hl, (ix - 3)
	push	hl
	call	_fat_ReadFile
	push	hl
	pop	bc
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	xor	a, a
	ld	hl, (ix - 12)
	ld	e, (ix - 9)
	call	__lcmpu
	jp	nz, BB11_10
	ld	iy, (ix - 6)
	ld	hl, (iy)
	ld.sis	de, 19778
	or	a, a
	sbc.sis	hl, de
	jr	nz, BB11_11
	ld	bc, 40
	ld	hl, (iy + 10)
	ld	(ix - 15), hl
	ld	hl, (iy + 14)
	ld	de, (iy + 18)
	ld	(ix - 9), de
	ld	a, (iy + 21)
	ld	(ix - 12), a
	ld	de, (iy + 28)
	ld	(ix - 18), de
	ld	e, (iy + 17)
	xor	a, a
	call	__lcmpu
	jr	nc, BB11_13
	ld	hl, _.str.2
	jr	BB11_12
BB11_10:
	ld	hl, _.str.1
	jr	BB11_12
BB11_11:
	ld	hl, _.str.1.2
BB11_12:
	push	hl
	call	_os_PutStrFull
	pop	hl
	ld	hl, (ix - 6)
	push	hl
	call	__ZdaPv
	pop	hl
	call	_usb_WaitForEvents
	ld	hl, (ix - 3)
	push	hl
	call	_fat_CloseFile
	pop	hl
	ld	hl, (ix - 3)
	push	hl
	call	_free
	pop	hl
	xor	a, a
	ld	sp, ix
	pop	ix
	ret
BB11_13:
	ld	d, (ix - 12)
	ld	iy, (ix - 6)
	ld	hl, (iy + 30)
	ld	e, (iy + 33)
	ld	(ix - 21), hl
	ld	(ix - 22), e
	call	__lcmpzero
	jr	z, BB11_15
	ld	hl, (ix - 21)
	ld	e, (ix - 22)
	ld	bc, 3
	xor	a, a
	call	__lcmpu
	jp	nz, BB11_18
BB11_15:
	ld	bc, 0
	ld	iy, (ix - 18)
	ld	c, iyl
	ld	b, iyh
	xor	a, a
	ld	hl, (ix - 9)
	ld	e, d
	call	__lmulu
	ld	bc, 31
	call	__ladd
	inc	bc
	call	__ldivs
	ld	c, 2
	call	__ishl
	ld	a, d
	push	hl
	pop	de
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld.sis	bc, 9
	or	a, a
	sbc.sis	hl, bc
	ld	(ix - 18), de
	jr	nc, BB11_17
	ld	iy, 4
	ld	hl, (ix - 9)
	ld	e, a
	ld	bc, 3
	xor	a, a
	call	__ladd
	lea	bc, iy
	call	__ldivs
	ld	c, 2
	call	__ishl
	push	hl
	pop	de
BB11_17:
	push	de
	call	__Znaj
	ld	(ix - 9), hl
	pop	hl
	ld	iy, (ix - 6)
	ld	de, (ix - 15)
	add	iy, de
	ld	hl, (ix - 18)
	push	hl
	push	iy
	ld	hl, -2883584
	push	hl
	call	_memcpy
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix - 9)
	push	hl
	call	__ZdaPv
	jr	BB11_19
BB11_18:
	ld	hl, _.str.3
	push	hl
	call	_os_PutStrFull
BB11_19:
	pop	hl
	ld	hl, (ix - 21)
	ld	e, (ix - 22)
	ld	bc, 3
	xor	a, a
	call	__lcmpu
	ld	d, 1
	ld	c, d
	jr	z, BB11_21
	ld	c, a
BB11_21:
	ld	(ix - 9), c
	call	__lcmpzero
	ld	hl, (ix - 6)
	jr	z, BB11_23
	ld	d, a
BB11_23:
	ld	(ix - 12), d
	push	hl
	call	__ZdaPv
	pop	hl
	call	_usb_WaitForEvents
	ld	hl, (ix - 3)
	push	hl
	call	_fat_CloseFile
	pop	hl
	ld	hl, (ix - 3)
	push	hl
	call	_free
	pop	hl
	ld	a, (ix - 12)
	rrc	a
	sbc	a, a
	ld	l, a
	ld	a, (ix - 9)
	rrc	a
	sbc	a, a
	ld	e, a
	ld	a, l
	or	a, e
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_main
_main:
	ld	iy, -3145600
	call	_os_ClrLCDFull
	call	_os_HomeUp
	call	_os_DrawStatusBar
	ld	hl, _.str.4
	push	hl
	call	_os_PutStrFull
	pop	hl
	call	_init_USB
	bit	0, a
	jr	z, BB12_8
	ld	hl, _.str.2.6
	ld	de, _.str.3.7
	push	de
	push	hl
	call	__Z13displayBitmapPKcS0_
	ld	hl, 6
	add	hl, sp
	ld	sp, hl
	ld	hl, _.str.4.8
	push	hl
	call	_os_PutStrFull
	pop	hl
	call	_usb_WaitForEvents
	ld	a, (_global+1796)
	bit	0, a
	jr	z, BB12_3
	ld	hl, _global+1027
	push	hl
	call	_fat_Close
	pop	hl
BB12_3:
	ld	a, (_global+1795)
	bit	0, a
	jr	z, BB12_5
	ld	hl, _global+3
	push	hl
	call	_msd_Close
	pop	hl
BB12_5:
	call	_usb_Cleanup
BB12_6:
	call	_os_GetCSC
	or	a, a
	jr	z, BB12_6
	or	a, a
	sbc	hl, hl
	ret
BB12_8:
	ld	hl, _.str.1.5
	push	hl
	call	_os_PutStrFull
	pop	hl
BB12_9:
	call	_os_GetCSC
	or	a, a
	jr	z, BB12_9
	ld	hl, 1
	ret
	section	.text,"ax",@progbits

	section	.bss,"aw",@nobits
	private	_global
_global:
	rb	1797

	section	.bss,"aw",@nobits
	private	_partitions
_partitions:
	rb	256

	section	.rodata,"a",@progbits
	private	_.str.1
_.str.1:
	db	" !Read failed.!", 0

	section	.rodata,"a",@progbits
	private	_.str.1.2
_.str.1.2:
	db	" !Magic bytes are wrong!", 0

	section	.rodata,"a",@progbits
	private	_.str.2
_.str.2:
	db	" !DIB header too small!", 0

	section	.rodata,"a",@progbits
	private	_.str.3
_.str.3:
	db	" !Compression mode wrong!", 0

	section	.rodata,"a",@progbits
	private	_.str.4
_.str.4:
	db	"Attempting to read bitmap, please wait... Press any key to cancel.", 0

	section	.rodata,"a",@progbits
	private	_.str.1.5
_.str.1.5:
	db	" Failed to open USB. Press any key to continue.", 0

	section	.rodata,"a",@progbits
	private	_.str.2.6
_.str.2.6:
	db	"/", 0

	section	.rodata,"a",@progbits
	private	_.str.3.7
_.str.3.7:
	db	"test.bmp", 0

	section	.rodata,"a",@progbits
	private	_.str.4.8
_.str.4.8:
	db	" Press any key to continue.", 0

	ident	"clang version 15.0.0 (https://github.com/jacobly0/llvm-project 005a99ce2569373524bd881207aa4a1e98a2b238)"
	ident	"clang version 15.0.0 (https://github.com/jacobly0/llvm-project 005a99ce2569373524bd881207aa4a1e98a2b238)"
	ident	"clang version 15.0.0 (https://github.com/jacobly0/llvm-project 005a99ce2569373524bd881207aa4a1e98a2b238)"
	extern	__ldivs
	extern	__ZdaPv
	extern	__Unwind_SjLj_Register
	extern	_toupper
	extern	_usb_WaitForInterrupt
	extern	_fat_GetFileSize
	extern	_usb_ResetDevice
	extern	_fat_Close
	extern	__lcmpzero
	extern	_msd_Read
	extern	_strncpy
	extern	_localtime
	extern	_strncat
	extern	_os_DrawStatusBar
	extern	_memcpy
	extern	__ishl
	extern	__ladd
	extern	_msd_Open
	extern	_strlen
	extern	_msd_FindPartitions
	extern	__Znaj
	extern	_fat_ReadFile
	extern	__iand
	extern	_fat_WriteFile
	extern	_os_PutStrFull
	extern	_fat_Open
	extern	_fat_Delete
	extern	_os_GetCSC
	extern	_usb_WaitForEvents
	extern	_free
	extern	__lshru
	extern	_time
	extern	_usb_Cleanup
	extern	_os_HomeUp
	extern	_msd_Close
	extern	_fat_Create
	extern	_fat_SetFileSize
	extern	_fat_CloseFile
	extern	__lmulu
	extern	__ishru
	extern	__Unwind_SjLj_Unregister
	extern	_fat_OpenFile
	extern	_calloc
	extern	_msd_Info
	extern	__lcmpu
	extern	_os_ClrLCDFull
	extern	_msd_Write
	extern	_usb_Init
