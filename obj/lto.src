	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_stringToUpper
_stringToUpper:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 9
	ld	sp, hl
	ld	hl, (ix + 6)
	push	hl
	call	_strlen
	pop	de
	inc	hl
	ld	de, 1
	push	de
	push	hl
	call	_calloc
	ld	iy, (ix + 6)
	push	hl
	pop	bc
	ld	hl, 6
	add	hl, sp
	ld	sp, hl
	ld	e, (iy)
	ld	a, e
	rlc	a
	sbc	hl, hl
	ld	a, e
	or	a, a
	jr	z, BB0_3
	ld	l, e
	inc	iy
	ld	(ix - 3), bc
	ld	(ix - 9), bc
BB0_2:
	ld	(ix - 6), iy
	push	hl
	call	_toupper
	ld	bc, (ix - 9)
	ld	iy, (ix - 6)
	pop	de
	ld	a, l
	ld	hl, (ix - 3)
	ld	(hl), a
	ex	de, hl
	ld	a, (iy)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	inc	de
	ld	(ix - 3), de
	inc	iy
	or	a, a
	jr	nz, BB0_2
BB0_3:
	push	bc
	pop	hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_handleUsbEvent
_handleUsbEvent:
	push	ix
	ld	ix, 0
	add	ix, sp
	push	hl
	ld	de, (ix + 6)
	ld	iy, 0
	dec	de
	ld	bc, 4
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jr	nc, BB1_6
	ld	hl, (ix + 9)
	ld	(ix - 3), hl
	ld	bc, (ix + 12)
	ld	hl, 100
	ld	iy, JTI1_0
	add	iy, de
	add	iy, de
	add	iy, de
	ld	iy, (iy)
	jp	(iy)
BB1_2:
	push	bc
	pop	iy
	ld	hl, (iy)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB1_4
	ld	de, 1795
	push	bc
	pop	hl
	add	hl, de
	ld	(hl), 0
BB1_4:
	ld	hl, 0
	ld	(ix - 3), hl
BB1_5:
	push	bc
	pop	hl
	ld	de, (ix - 3)
	ld	(hl), de
	ld	iy, 0
BB1_6:
	lea	hl, iy
BB1_7:
	ld	sp, ix
	pop	ix
	ret
BB1_8:
	ld	hl, (ix + 9)
	push	hl
	call	_usb_ResetDevice
	pop	de
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits
	section	.rodata,"a",@progbits
	private	JTI1_0
JTI1_0:
	dl	BB1_2
	dl	BB1_8
	dl	BB1_7
	dl	BB1_5

	section	.text,"ax",@progbits
	public	_init_USB
_init_USB:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 14
	ld	sp, hl
	ld	iy, _global
	xor	a, a
	ld	(_global), a
	lea	de, iy
	inc	de
	ld	bc, 1796
	lea	hl, iy
	ldir
	ld	hl, 36106
	push	hl
	ld	hl, 0
	push	hl
	push	iy
	ld	hl, _handleUsbEvent
	push	hl
	call	_usb_Init
	push	hl
	pop	de
	ld	hl, 12
	add	hl, sp
	ld	sp, hl
BB2_1:
	ld	hl, (_global)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB2_5
	ex	de, hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	nz, BB2_11
	call	_os_GetCSC
	or	a, a
	jp	nz, BB2_11
	call	_usb_WaitForInterrupt
	push	hl
	pop	de
	jr	BB2_1
BB2_5:
	ld	de, _global+3
	push	hl
	push	de
	call	_msd_Open
	ld	iy, 6
	add	iy, sp
	ld	sp, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	nz, BB2_11
	ld	a, 1
	ld	(_global+1795), a
	pea	ix - 8
	ld	hl, _global+3
	push	hl
	call	_msd_Info
	ld	iy, 6
	add	iy, sp
	ld	sp, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB2_11
	ld	de, _partitions
	ld	hl, 32
	push	hl
	ld	(ix - 11), de
	push	de
	ld	hl, _global+3
	push	hl
	call	_msd_FindPartitions
	ld	e, a
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	or	a, a
	jr	z, BB2_11
	ld	bc, _msd_Write
	or	a, a
	sbc	hl, hl
	ld	l, e
	ld	(ix - 14), hl
BB2_9:
	ld	iy, (ix - 11)
	ld	hl, (iy)
	ld	(ix - 11), iy
	ld	e, (iy + 3)
	push	de
	push	hl
	ld	hl, _global+3
	push	hl
	push	bc
	ld	hl, _msd_Read
	push	hl
	ld	hl, _global+1027
	push	hl
	call	_fat_Open
	ld	iy, 18
	add	iy, sp
	ld	sp, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB2_12
	ld	iy, (ix - 11)
	lea	iy, iy + 8
	ld	(ix - 11), iy
	ld	hl, (ix - 14)
	dec	hl
	ld	(ix - 14), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	bc, _msd_Write
	jr	nz, BB2_9
BB2_11:
	call	_usb_Cleanup
	xor	a, a
	ld	sp, ix
	pop	ix
	ret
BB2_12:
	ld	a, 1
	ld	(_global+1796), a
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_openFile
_openFile:
	push	ix
	ld	ix, 0
	add	ix, sp
	ld	hl, -284
	add	hl, sp
	ld	sp, hl
	ld	bc, -266
	lea	hl, ix
	add	hl, bc
	ld	bc, -281
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	hl, (ix + 6)
	push	hl
	call	_strlen
	pop	de
	inc	hl
	ld	de, 1
	push	de
	push	hl
	call	_calloc
	ld	iy, (ix + 6)
	push	ix
	ld	bc, -272
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	hl, 6
	add	hl, sp
	ld	sp, hl
	ld	e, (iy)
	ld	a, e
	rlc	a
	sbc	hl, hl
	ld	a, e
	or	a, a
	jr	z, BB3_3
	ld	l, e
	inc	iy
	push	ix
	ld	bc, -272
	add	ix, bc
	ld	de, (ix)
	pop	ix
	push	ix
	ld	bc, -269
	add	ix, bc
	ld	(ix), de
	pop	ix
BB3_2:
	push	ix
	ld	bc, -275
	add	ix, bc
	ld	(ix), iy
	pop	ix
	push	hl
	call	_toupper
	ld	bc, -275
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	pop	de
	ld	a, l
	ld	bc, -269
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	(hl), a
	ex	de, hl
	ld	a, (iy)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	inc	iy
	inc	de
	push	ix
	add	ix, bc
	ld	(ix), de
	pop	ix
	or	a, a
	jr	nz, BB3_2
BB3_3:
	ld	bc, -281
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	lea	hl, iy + 4
	ld	bc, -269
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	hl, (ix + 9)
	push	hl
	call	_strlen
	pop	de
	inc	hl
	ld	de, 1
	push	de
	push	hl
	call	_calloc
	ld	iy, (ix + 9)
	push	ix
	ld	bc, -275
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	hl, 6
	add	hl, sp
	ld	sp, hl
	ld	e, (iy)
	ld	a, e
	rlc	a
	sbc	hl, hl
	ld	a, e
	or	a, a
	jr	z, BB3_6
	ld	l, e
	inc	iy
	push	ix
	ld	bc, -275
	add	ix, bc
	ld	de, (ix)
	pop	ix
	push	ix
	ld	bc, -278
	add	ix, bc
	ld	(ix), de
	pop	ix
BB3_5:
	push	ix
	ld	bc, -284
	add	ix, bc
	ld	(ix), iy
	pop	ix
	push	hl
	call	_toupper
	ld	bc, -284
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	pop	de
	ld	a, l
	ld	bc, -278
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	(hl), a
	ex	de, hl
	ld	a, (iy)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	inc	iy
	inc	de
	push	ix
	add	ix, bc
	ld	(ix), de
	pop	ix
	or	a, a
	jr	nz, BB3_5
BB3_6:
	call	_usb_WaitForEvents
	ld	hl, 64
	push	hl
	ld	hl, 1
	push	hl
	call	_calloc
	ld	bc, -278
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	hl, 6
	add	hl, sp
	ld	sp, hl
	ld	hl, 256
	push	hl
	ld	bc, -272
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -269
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_strncpy
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	(ix - 7), 0
	ld	bc, -269
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_strlen
	push	hl
	pop	de
	pop	hl
	ld	bc, -269
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	pop	iy
	add	iy, de
	ld	a, (iy - 1)
	cp	a, 47
	jr	z, BB3_8
	push	hl
	call	_strlen
	push	hl
	pop	de
	pop	hl
	ld	bc, -269
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, de
	ld.sis	de, 47
	ld	(hl), e
	inc	hl
	ld	(hl), d
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
BB3_8:
	push	hl
	call	_strlen
	push	hl
	pop	de
	pop	hl
	ld	hl, 256
	or	a, a
	sbc	hl, de
	push	hl
	ld	bc, -275
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -269
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_strncat
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	(ix - 7), 0
	ld	bc, -272
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_free
	pop	hl
	ld	bc, -275
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_free
	pop	hl
	bit	0, (ix + 12)
	jr	z, BB3_10
	or	a, a
	sbc	hl, hl
	push	hl
	ld	bc, -275
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -272
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	hl, _global+1027
	push	hl
	call	_fat_Create
	ld	iy, 12
	add	iy, sp
	ld	sp, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	nz, BB3_14
BB3_10:
	ld	bc, -278
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	bc, -269
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	hl, _global+1027
	push	hl
	call	_fat_OpenFile
	ld	iy, 12
	add	iy, sp
	ld	sp, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	nz, BB3_14
	ld	bc, -281
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	lea	hl, iy
	ld	bc, -269
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	push	hl
	call	_time
	pop	hl
	ld	bc, -269
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_localtime
	pop	de
	ld	de, -278
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	ld	iy, (iy + 40)
	push	ix
	ld	de, -269
	add	ix, de
	ld	(ix), iy
	pop	ix
	ld	(iy + 11), 32
	ld	(iy + 13), 0
	push	hl
	pop	iy
	ld	hl, (iy)
	ld	c, 1
	call	__ishru
	push	ix
	ld	de, -272
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	hl, (iy + 3)
	lea	de, iy
	ld	a, 5
	ld	c, a
	call	__ishl
	ld	(ix - 3), de
	push	ix
	ld	de, -272
	add	ix, de
	ld	bc, (ix)
	pop	ix
	add	hl, bc
	push	ix
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	hl, (iy + 6)
	ld	c, 11
	call	__ishl
	push	hl
	pop	bc
	lea	iy, ix
	add	iy, de
	ld	hl, (iy)
	add	hl, bc
	push	ix
	ld	bc, -269
	add	ix, bc
	ld	iy, (ix)
	pop	ix
	push	ix
	ld	bc, -281
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	(iy + 22), l
	ld	(iy + 23), h
	ld	de, (ix - 3)
	push	de
	pop	iy
	ld	hl, (iy + 9)
	push	ix
	ld	bc, -272
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	hl, (iy + 12)
	ld	c, a
	call	__ishl
	ld	(ix - 3), de
	push	ix
	ld	de, -275
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	hl, (iy + 15)
	ld	c, 9
	call	__ishl
	push	hl
	pop	bc
	ld	de, (ix - 3)
	ld	de, 24608
	ld	(ix - 3), bc
	ld	bc, -272
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	add	hl, de
	push	ix
	ld	bc, -275
	add	ix, bc
	ld	de, (ix)
	pop	ix
	add	hl, de
	ld	bc, (ix - 3)
	add	hl, bc
	push	ix
	ld	bc, -269
	add	ix, bc
	ld	iy, (ix)
	pop	ix
	ld	(iy + 24), l
	ld	(iy + 25), h
	ld	(iy + 18), l
	ld	(iy + 19), h
	bit	0, (ix + 12)
	jr	z, BB3_13
	push	ix
	ld	bc, -281
	add	ix, bc
	ld	de, (ix)
	pop	ix
	ld	(iy + 14), e
	ld	(iy + 15), d
	ld	(iy + 16), l
	ld	(iy + 17), h
BB3_13:
	ld	bc, -278
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	sp, ix
	pop	ix
	ret
BB3_14:
	ld	bc, -278
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_free
	pop	hl
	ld	hl, 0
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_closeFile
_closeFile:
	push	ix
	ld	ix, 0
	add	ix, sp
	ld	hl, (ix + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB4_2
	call	_usb_WaitForEvents
	ld	hl, (ix + 6)
	push	hl
	call	_fat_CloseFile
	pop	hl
	ld	hl, (ix + 6)
	push	hl
	call	_free
	pop	hl
BB4_2:
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_readFile
_readFile:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 6
	ld	sp, hl
	ld	hl, (ix + 6)
	xor	a, a
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB5_5
	push	hl
	call	_fat_GetFileSize
	pop	bc
	ld	bc, 511
	xor	a, a
	call	__ladd
	push	hl
	pop	bc
	ld	a, e
	ld	l, 9
	call	__lshru
	ld	(ix - 3), bc
	ld	(ix - 6), a
	ld	hl, (ix + 6)
	push	hl
	call	_fat_GetFileBlockOffset
	push	hl
	pop	bc
	pop	hl
	ld	d, 0
	ld	hl, (ix - 3)
	ld	e, (ix - 6)
	ld	a, d
	call	__lsub
	push	hl
	pop	bc
	ld	a, e
	push	bc
	pop	iy
	ld	(ix - 3), a
	ld	l, 9
	call	__lshl
	ld	hl, (ix + 9)
	ld	e, d
	call	__lcmpu
	jr	nc, BB5_3
	ld	c, 9
	ld	hl, (ix + 9)
	call	__ishru
	push	hl
	pop	iy
	xor	a, a
	ld	(ix - 3), a
BB5_3:
	ld	hl, (ix + 12)
	push	hl
	ld	(ix - 6), iy
	push	iy
	ld	hl, (ix + 6)
	push	hl
	call	_fat_ReadFile
	push	hl
	pop	bc
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	xor	a, a
	ld	hl, (ix - 6)
	ld	e, (ix - 3)
	call	__lcmpu
	jr	z, BB5_6
	ld	a, 0
BB5_5:
	ld	sp, ix
	pop	ix
	ret
BB5_6:
	ld	a, -1
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_writeFile
_writeFile:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 16
	ld	sp, hl
	ld	hl, (ix + 6)
	xor	a, a
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB6_6
	ld	bc, (ix + 9)
	ld	de, 0
	push	de
	push	bc
	push	hl
	call	_fat_SetFileSize
	xor	a, a
	ld	iy, 9
	add	iy, sp
	ld	sp, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	nz, BB6_6
	ld	de, (ix + 12)
	ld	bc, 511
	lea	hl, ix - 4
	ld	(ix - 7), hl
	ld	hl, (ix + 9)
	add	hl, bc
	ld	c, 9
	call	__ishru
	ld	(ix - 10), hl
	push	de
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_fat_WriteFile
	ld	iy, 9
	add	iy, sp
	ld	sp, iy
	ld	de, (ix - 10)
	or	a, a
	sbc	hl, de
	jr	z, BB6_4
	ld	a, 0
	jr	BB6_5
BB6_4:
	ld	a, -1
BB6_5:
	ld	(ix - 10), a
	ld	hl, (ix - 7)
	push	hl
	call	_time
	pop	hl
	ld	hl, (ix - 7)
	push	hl
	call	_localtime
	pop	de
	ld	iy, (ix + 6)
	ld	iy, (iy + 40)
	ld	(ix - 7), iy
	ld	(iy + 11), 32
	push	hl
	pop	iy
	ld	hl, (iy)
	ld	c, 1
	call	__ishru
	ld	(ix - 13), hl
	ld	hl, (iy + 3)
	lea	de, iy
	ld	a, 5
	ld	c, a
	call	__ishl
	ld	bc, (ix - 13)
	add	hl, bc
	ld	(ix - 13), hl
	ld	hl, (iy + 6)
	ld	c, 11
	call	__ishl
	push	hl
	pop	bc
	ld	hl, (ix - 13)
	add	hl, bc
	ld	iy, (ix - 7)
	ld	(iy + 22), l
	ld	(iy + 23), h
	push	de
	pop	iy
	ld	hl, (iy + 9)
	ld	(ix - 13), hl
	ld	hl, (iy + 12)
	ld	c, a
	call	__ishl
	ld	(ix - 16), hl
	ld	hl, (iy + 15)
	ld	c, 9
	call	__ishl
	push	hl
	pop	bc
	ld	de, 24608
	ld	hl, (ix - 13)
	add	hl, de
	ld	de, (ix - 16)
	add	hl, de
	add	hl, bc
	ld	iy, (ix - 7)
	ld	(iy + 24), l
	ld	(iy + 25), h
	ld	(iy + 18), l
	ld	(iy + 19), h
	ld	a, (ix - 10)
BB6_6:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_createDirectory
_createDirectory:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 12
	ld	sp, hl
	ld	hl, (ix + 6)
	push	hl
	call	_strlen
	pop	de
	inc	hl
	ld	de, 1
	push	de
	push	hl
	call	_calloc
	ld	iy, (ix + 6)
	ld	(ix - 3), hl
	ld	hl, 6
	add	hl, sp
	ld	sp, hl
	ld	e, (iy)
	ld	a, e
	rlc	a
	sbc	hl, hl
	ld	a, e
	or	a, a
	jr	z, BB7_3
	ld	l, e
	inc	iy
	ld	de, (ix - 3)
	ld	(ix - 6), de
BB7_2:
	ld	(ix - 9), iy
	push	hl
	call	_toupper
	ld	iy, (ix - 9)
	pop	de
	ld	a, l
	ld	hl, (ix - 6)
	ld	(hl), a
	ex	de, hl
	ld	a, (iy)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	inc	iy
	inc	de
	ld	(ix - 6), de
	or	a, a
	jr	nz, BB7_2
BB7_3:
	ld	hl, (ix + 9)
	push	hl
	call	_strlen
	pop	de
	inc	hl
	ld	de, 1
	push	de
	push	hl
	call	_calloc
	ld	iy, (ix + 9)
	ld	(ix - 6), hl
	ld	hl, 6
	add	hl, sp
	ld	sp, hl
	ld	e, (iy)
	ld	a, e
	rlc	a
	sbc	hl, hl
	ld	a, e
	or	a, a
	jr	z, BB7_6
	ld	l, e
	inc	iy
	ld	de, (ix - 6)
	ld	(ix - 9), de
BB7_5:
	ld	(ix - 12), iy
	push	hl
	call	_toupper
	ld	iy, (ix - 12)
	pop	de
	ld	a, l
	ld	hl, (ix - 9)
	ld	(hl), a
	ex	de, hl
	ld	a, (iy)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	inc	iy
	inc	de
	ld	(ix - 9), de
	or	a, a
	jr	nz, BB7_5
BB7_6:
	call	_usb_WaitForEvents
	ld	hl, 16
	push	hl
	ld	hl, (ix - 6)
	push	hl
	ld	hl, (ix - 3)
	push	hl
	ld	hl, _global+1027
	push	hl
	call	_fat_Create
	ld	(ix - 9), hl
	ld	hl, 12
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix - 3)
	push	hl
	call	_free
	pop	hl
	ld	hl, (ix - 6)
	push	hl
	call	_free
	ld	hl, (ix - 9)
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	e, -1
	ld	d, 0
	ld	a, e
	jr	nz, BB7_9
	ld	bc, 5
	or	a, a
	sbc	hl, bc
	jr	nz, BB7_10
BB7_8:
	or	a, e
	ld	sp, ix
	pop	ix
	ret
BB7_9:
	ld	a, d
	ld	bc, 5
	or	a, a
	sbc	hl, bc
	jr	z, BB7_8
BB7_10:
	ld	e, d
	or	a, e
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_getSizeOf
_getSizeOf:
	push	ix
	ld	ix, 0
	add	ix, sp
	ld	hl, (ix + 6)
	ld	de, 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	push	hl
	ex	de, hl
	call	nz, _fat_GetFileSize
	pop	de
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_deleteFile
_deleteFile:
	push	ix
	ld	ix, 0
	add	ix, sp
	ld	hl, -277
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix + 6)
	push	hl
	call	_strlen
	pop	de
	inc	hl
	ld	de, 1
	push	de
	push	hl
	call	_calloc
	ld	iy, (ix + 6)
	push	ix
	ld	bc, -268
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	hl, 6
	add	hl, sp
	ld	sp, hl
	ld	e, (iy)
	ld	a, e
	rlc	a
	sbc	hl, hl
	ld	a, e
	or	a, a
	jr	z, BB9_3
	ld	l, e
	inc	iy
	push	ix
	ld	bc, -268
	add	ix, bc
	ld	de, (ix)
	pop	ix
	push	ix
	ld	bc, -265
	add	ix, bc
	ld	(ix), de
	pop	ix
BB9_2:
	push	ix
	ld	bc, -271
	add	ix, bc
	ld	(ix), iy
	pop	ix
	push	hl
	call	_toupper
	ld	bc, -271
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	pop	de
	ld	a, l
	ld	bc, -265
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	(hl), a
	ex	de, hl
	ld	a, (iy)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	inc	iy
	inc	de
	push	ix
	add	ix, bc
	ld	(ix), de
	pop	ix
	or	a, a
	jr	nz, BB9_2
BB9_3:
	ld	bc, -262
	lea	hl, ix
	add	hl, bc
	ld	bc, -265
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	hl, (ix + 9)
	push	hl
	call	_strlen
	pop	de
	inc	hl
	ld	de, 1
	push	de
	push	hl
	call	_calloc
	ld	iy, (ix + 9)
	push	ix
	ld	bc, -271
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	hl, 6
	add	hl, sp
	ld	sp, hl
	ld	e, (iy)
	ld	a, e
	rlc	a
	sbc	hl, hl
	ld	a, e
	or	a, a
	jr	z, BB9_6
	ld	l, e
	inc	iy
	push	ix
	ld	bc, -271
	add	ix, bc
	ld	de, (ix)
	pop	ix
	push	ix
	ld	bc, -274
	add	ix, bc
	ld	(ix), de
	pop	ix
BB9_5:
	push	ix
	ld	bc, -277
	add	ix, bc
	ld	(ix), iy
	pop	ix
	push	hl
	call	_toupper
	ld	bc, -277
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	pop	de
	ld	a, l
	ld	bc, -274
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	(hl), a
	ex	de, hl
	ld	a, (iy)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	inc	iy
	inc	de
	push	ix
	add	ix, bc
	ld	(ix), de
	pop	ix
	or	a, a
	jr	nz, BB9_5
BB9_6:
	call	_usb_WaitForEvents
	ld	hl, 256
	push	hl
	ld	bc, -268
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -265
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_strncpy
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	(ix - 7), 0
	ld	bc, -265
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_strlen
	push	hl
	pop	de
	pop	hl
	ld	bc, -265
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	pop	iy
	add	iy, de
	ld	a, (iy - 1)
	cp	a, 47
	jr	z, BB9_8
	ld	bc, _.str.2.8
	ld	hl, 256
	or	a, a
	sbc	hl, de
	push	hl
	push	bc
	ld	bc, -265
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_strncat
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	bc, -265
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
BB9_8:
	push	hl
	call	_strlen
	push	hl
	pop	de
	pop	hl
	ld	hl, 256
	or	a, a
	sbc	hl, de
	push	hl
	ld	bc, -271
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -265
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_strncat
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	bc, -265
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	hl, _global+1027
	push	hl
	call	_fat_Delete
	ld	hl, 6
	add	hl, sp
	ld	sp, hl
	ld	bc, -268
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_free
	pop	hl
	ld	bc, -271
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_free
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_close_USB
_close_USB:
	call	_usb_WaitForEvents
	ld	a, (_global+1796)
	bit	0, a
	jr	nz, BB10_3
	ld	a, (_global+1795)
	bit	0, a
	jr	nz, BB10_4
BB10_2:
	jp	_usb_Cleanup
BB10_3:
	ld	hl, _global+1027
	push	hl
	call	_fat_Close
	pop	hl
	ld	a, (_global+1795)
	bit	0, a
	jr	z, BB10_2
BB10_4:
	ld	hl, _global+3
	push	hl
	call	_msd_Close
	pop	hl
	jp	_usb_Cleanup
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	__Z16findBitMaskShiftm
__Z16findBitMaskShiftm:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 4
	ld	sp, hl
	ld	iy, (ix + 6)
	ld	e, (ix + 9)
	ld	d, -5
	lea	hl, iy
	call	__lcmpzero
	jr	z, BB11_2
BB11_1:
	lea	bc, iy
	ld	a, e
	ld	l, 1
	call	__lshru
	ld	(ix - 3), bc
	ld	(ix - 4), a
	inc	d
	lea	hl, iy
	ld	bc, 2
	xor	a, a
	call	__lcmpu
	ld	iy, (ix - 3)
	ld	e, (ix - 4)
	jr	nc, BB11_1
BB11_2:
	ld	a, d
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	__Z13displayRGBRowPhijPtPFtS_E
__Z13displayRGBRowPhijPtPFtS_E:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 12
	ld	sp, hl
	ld	bc, (ix + 9)
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB12_5
	dec	bc
	ld	de, 319
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jr	c, BB12_3
	ld	bc, 319
BB12_3:
	ld	de, (ix + 6)
	ld	hl, (ix + 15)
	ld	(ix - 3), hl
	inc	bc
BB12_4:
	ld	(ix - 9), de
	ld	(ix - 6), bc
	push	de
	ld	hl, (ix + 18)
	call	__indcallhl
	ld	iy, (ix - 9)
	ld	bc, (ix - 6)
	ld	(ix - 12), hl
	pop	de
	ld	hl, (ix - 3)
	ld	de, (ix - 12)
	ld	(hl), e
	inc	hl
	ld	(hl), d
	ld	de, (ix + 12)
	add	iy, de
	lea	de, iy
	ld	iy, (ix - 3)
	lea	iy, iy + 2
	ld	(ix - 3), iy
	dec	bc
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB12_4
BB12_5:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	__Z18displayIndexed8RowPhiPtS0_
__Z18displayIndexed8RowPhiPtS0_:
	push	ix
	ld	ix, 0
	add	ix, sp
	push	hl
	ld	de, (ix + 9)
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB13_5
	dec	de
	ld	bc, 319
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jr	c, BB13_3
	ld	de, 319
BB13_3:
	ld	bc, (ix + 6)
	ld	iy, (ix + 15)
	inc	de
	ld	a, 1
BB13_4:
	ld	(ix - 3), bc
	or	a, a
	sbc	hl, hl
	lea	bc, iy
	ld	iy, (ix - 3)
	ld	l, (iy)
	push	bc
	pop	iy
	ld	c, a
	call	__ishl
	push	hl
	pop	bc
	ld	hl, (ix + 12)
	add	hl, bc
	ld	hl, (hl)
	ld	(iy), l
	ld	(iy + 1), h
	lea	iy, iy + 2
	dec	de
	ld	bc, (ix - 3)
	inc	bc
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB13_4
BB13_5:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	__Z17displayIndexedRowPhihPtS0_
__Z17displayIndexedRowPhihPtS0_:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 24
	ld	sp, hl
	ld	hl, (ix + 6)
	ld	(ix - 6), hl
	ld	de, (ix + 9)
	ld	(ix - 3), de
	ld	a, (ix + 12)
	ld	(ix - 13), a
	ld	hl, (ix + 15)
	ld	(ix - 19), hl
	ld	hl, (ix + 18)
	ld	(ix - 16), hl
	push	de
	call	__Znaj
	ld	c, (ix - 13)
	ld	de, (ix - 3)
	ld	(ix - 12), hl
	pop	hl
	ld	a, 8
	sub	a, c
	ld	b, a
	push	de
	pop	iy
	ex	de, hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB14_9
	scf
	sbc	hl, hl
	call	__ishl
	ld	a, l
	cpl
	ld	(ix - 23), a
	ld	hl, (ix - 12)
	ld	(ix - 9), hl
	lea	de, iy
	ld	(ix - 24), b
	ld	c, b
BB14_2:
	ld	(ix - 22), de
	ld	de, 0
	push	de
	pop	hl
	ld	iy, (ix - 6)
	ld	l, (iy)
	call	__ishru
	ld	a, l
	and	a, (ix - 23)
	ld	hl, (ix - 9)
	ld	(hl), a
	ld	a, c
	ld	l, (ix - 13)
	cp	a, l
	sbc	a, a
	ld	h, a
	ld	a, c
	sub	a, l
	ld	b, a
	ld	a, h
	ld	c, h
	and	a, 1
	ld	e, a
	ld	hl, (ix - 6)
	add	hl, de
	ld	(ix - 6), hl
	bit	0, c
	ld	c, (ix - 24)
	jr	nz, BB14_4
	ld	c, b
BB14_4:
	ld	de, (ix - 22)
	dec	de
	ld	hl, (ix - 9)
	inc	hl
	ld	(ix - 9), hl
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	iy, (ix - 3)
	jp	nz, BB14_2
	lea	hl, iy
	dec	hl
	ld	bc, 319
	push	hl
	pop	iy
	or	a, a
	sbc	hl, bc
	jr	c, BB14_7
	ld	de, 319
	push	de
	pop	iy
BB14_7:
	inc	iy
	ld	a, 1
	ld	de, (ix - 12)
BB14_8:
	ld	(ix - 6), de
	ld	(ix - 3), iy
	or	a, a
	sbc	hl, hl
	ld	iy, (ix - 6)
	ld	l, (iy)
	ld	c, a
	call	__ishl
	push	hl
	pop	bc
	ld	hl, (ix - 19)
	add	hl, bc
	ld	bc, (ix - 3)
	ld	hl, (hl)
	ld	de, (ix - 16)
	push	de
	pop	iy
	ld	(iy), l
	ld	(iy + 1), h
	lea	iy, iy + 2
	ld	(ix - 16), iy
	dec	bc
	ld	de, (ix - 6)
	inc	de
	push	bc
	pop	iy
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB14_8
BB14_9:
	ld	hl, (ix - 12)
	ld	(ix + 6), hl
	ld	sp, ix
	pop	ix
	jp	__ZdaPv
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	__Z15generatePalettejPhPt
__Z15generatePalettejPhPt:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 9
	ld	sp, hl
	ld	de, (ix + 6)
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB15_3
	ld	bc, (ix + 9)
	ld	hl, (ix + 12)
	ld	(ix - 3), hl
BB15_2:
	ld	(ix - 9), bc
	ld	(ix - 6), de
	push	bc
	call	_rgb888to565
	ld	iy, (ix - 9)
	ld	c, l
	ld	b, h
	pop	de
	ld	de, (ix - 6)
	ld	hl, (ix - 3)
	ld	(hl), c
	inc	hl
	ld	(hl), b
	lea	iy, iy + 4
	lea	bc, iy
	dec	de
	ld	iy, (ix - 3)
	lea	iy, iy + 2
	ld	(ix - 3), iy
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB15_2
BB15_3:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	__Z18displayBitFieldRowPhijPtP16bitmapInfoHeader
__Z18displayBitFieldRowPhijPtP16bitmapInfoHeader:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 44
	ld	sp, hl
	ld	iy, (ix + 18)
	ld	d, -5
	ld	hl, (iy + 40)
	ld	e, (iy + 43)
	ld	(ix - 17), hl
	ld	(ix - 18), e
	call	__lcmpzero
	ld	(ix - 1), d
	jr	z, BB16_3
	ld	d, -5
	ld	iy, (ix - 17)
	ld	e, (ix - 18)
BB16_2:
	lea	bc, iy
	ld	a, e
	ld	l, 1
	call	__lshru
	ld	(ix - 4), bc
	ld	(ix - 5), a
	inc	d
	lea	hl, iy
	ld	bc, 2
	xor	a, a
	call	__lcmpu
	ld	iy, (ix - 4)
	ld	e, (ix - 5)
	jr	nc, BB16_2
BB16_3:
	ld	(ix - 5), d
	ld	a, -6
	ld	(ix - 4), a
	ld	hl, (ix + 18)
	push	hl
	pop	iy
	ld	hl, (iy + 44)
	ld	e, (iy + 47)
	call	__lcmpzero
	ld	(ix - 30), hl
	ld	(ix - 31), e
	jr	z, BB16_6
	push	hl
	pop	iy
BB16_5:
	lea	bc, iy
	ld	a, e
	ld	l, 1
	call	__lshru
	ld	(ix - 8), bc
	ld	d, a
	ld	a, (ix - 4)
	inc	a
	ld	(ix - 4), a
	lea	hl, iy
	ld	bc, 2
	xor	a, a
	call	__lcmpu
	ld	iy, (ix - 8)
	ld	e, d
	jr	nc, BB16_5
BB16_6:
	ld	hl, (ix + 9)
	ld	(ix - 11), hl
	ld	hl, (ix + 18)
	push	hl
	pop	iy
	ld	hl, (iy + 48)
	ld	e, (iy + 51)
	call	__lcmpzero
	ld	(ix - 34), hl
	ld	(ix - 35), e
	jr	z, BB16_9
	push	hl
	pop	iy
BB16_8:
	lea	bc, iy
	ld	a, e
	ld	l, 1
	call	__lshru
	ld	(ix - 8), bc
	ld	d, a
	ld	a, (ix - 1)
	inc	a
	ld	(ix - 1), a
	lea	hl, iy
	ld	bc, 2
	xor	a, a
	call	__lcmpu
	ld	iy, (ix - 8)
	ld	e, d
	jr	nc, BB16_8
BB16_9:
	ld	hl, (ix + 9)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB16_22
	push	af
	ld	a, (ix - 5)
	ld	iyl, a
	pop	af
	ld	a, iyl
	rlc	a
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, iyl
	push	de
	pop	hl
	ld	bc, 11
	add	hl, bc
	push	hl
	pop	bc
	ld	hl, -11
	or	a, a
	sbc	hl, de
	ld	a, iyl
	add	a, -128
	cp	a, 117
	jr	c, BB16_12
	push	bc
	pop	hl
BB16_12:
	ld	(ix - 14), hl
	ld	a, (ix - 4)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, a
	push	de
	pop	iy
	ld	bc, 5
	add	iy, bc
	ld	hl, -5
	or	a, a
	sbc	hl, de
	add	a, -128
	cp	a, 123
	jr	c, BB16_14
	lea	hl, iy
BB16_14:
	ld	(ix - 24), hl
	ld	hl, (ix + 6)
	ld	(ix - 8), hl
	ld	hl, (ix + 15)
	ld	(ix - 21), hl
	ld	c, (ix - 1)
	ld	a, c
	rlc	a
	sbc	hl, hl
	ld	l, c
	push	hl
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	ld	bc, (ix - 14)
	ld	a, c
	ld	(ix - 42), a
	ld	de, (ix - 24)
	ld	a, e
	ld	(ix - 43), a
	ld	a, l
	ld	(ix - 44), a
BB16_15:
	ld	c, (ix - 1)
	ld	a, c
	rlc	a
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, c
	push	de
	pop	hl
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	iy
	ld	bc, -1
	xor	a, a
	ex	de, hl
	ld	e, iyl
	call	__land
	ld	(ix - 38), hl
	ld	e, (ix - 4)
	ld	l, e
	rlc	l
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, e
	push	bc
	pop	hl
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	de
	push	bc
	pop	hl
	ld	bc, -1
	call	__land
	ld	(ix - 41), hl
	ld	e, (ix - 5)
	ld	l, e
	rlc	l
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, e
	push	bc
	pop	hl
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	de
	push	bc
	pop	hl
	ld	bc, -1
	call	__land
	ld	(ix - 27), hl
	ld	iy, (ix - 8)
	ld	hl, (iy)
	ld	d, (iy + 3)
	ld	(ix - 14), hl
	ld	e, d
	ld	bc, (ix - 17)
	ld	a, (ix - 18)
	call	__land
	push	hl
	pop	iy
	lea	bc, iy
	ld	a, e
	ld	l, (ix - 42)
	call	__lshl
	ld	(ix - 24), bc
	lea	bc, iy
	ld	a, e
	ld	hl, (ix - 27)
	call	__lshru
	ld	l, c
	ld	h, b
	ld	c, 11
	call	__sshl
	ld	a, (ix - 5)
	add	a, -128
	cp	a, -127
	jp	c, BB16_17
	ld	(ix - 24), hl
BB16_17:
	ld	bc, (ix - 30)
	ld	a, (ix - 31)
	ld	hl, (ix - 14)
	ld	e, d
	call	__land
	push	hl
	pop	iy
	lea	bc, iy
	ld	a, e
	ld	l, (ix - 43)
	call	__lshl
	ld	(ix - 27), bc
	lea	bc, iy
	ld	a, e
	ld	hl, (ix - 41)
	call	__lshru
	ld	l, c
	ld	h, b
	ld	c, 5
	call	__sshl
	ld	a, (ix - 4)
	add	a, -128
	cp	a, -127
	jp	c, BB16_19
	ld	(ix - 27), hl
BB16_19:
	ld	bc, (ix - 34)
	ld	a, (ix - 35)
	ld	hl, (ix - 14)
	ld	e, d
	call	__land
	push	hl
	pop	iy
	lea	bc, iy
	ld	a, e
	ld	hl, (ix - 38)
	call	__lshru
	ld	(ix - 14), bc
	lea	bc, iy
	ld	a, e
	ld	l, (ix - 44)
	call	__lshl
	ld	a, (ix - 1)
	add	a, -128
	cp	a, -127
	jr	c, BB16_21
	ld	bc, (ix - 14)
BB16_21:
	ld	hl, (ix - 24)
	add.sis	hl, bc
	ld	de, (ix - 27)
	add.sis	hl, de
	ld	iy, (ix - 21)
	ld	(iy), l
	ld	(iy + 1), h
	ld	de, (ix + 12)
	ld	hl, (ix - 8)
	add	hl, de
	ld	(ix - 8), hl
	lea	iy, iy + 2
	ld	(ix - 21), iy
	ld	hl, (ix - 11)
	dec	hl
	ld	(ix - 11), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	nz, BB16_15
BB16_22:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	__Z13displayBitmapPKcS0_
__Z13displayBitmapPKcS0_:
	push	ix
	ld	ix, 0
	add	ix, sp
	ld	hl, -179
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	xor	a, a
	ld	(ix - 118), a
	ld	bc, 0
	push	bc
	push	de
	push	hl
	call	_openFile
	ld	iy, 9
	add	iy, sp
	ld	sp, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB17_13
	ld	de, 5120
	push	de
	ld	(ix - 117), hl
	call	__Znaj
	ld	(ix - 121), hl
	pop	hl
	ld	hl, (ix - 117)
	push	hl
	call	_fat_GetFileSize
	pop	bc
	ld	bc, 511
	xor	a, a
	call	__ladd
	push	hl
	pop	bc
	ld	a, e
	ld	l, 9
	call	__lshru
	ld	(ix - 124), bc
	ld	(ix - 127), a
	ld	hl, (ix - 117)
	push	hl
	call	_fat_GetFileBlockOffset
	push	hl
	pop	bc
	pop	hl
	xor	a, a
	ld	hl, (ix - 124)
	ld	e, (ix - 127)
	call	__lsub
	push	hl
	pop	iy
	ld	d, e
	lea	bc, iy
	ld	a, d
	ld	l, 9
	call	__lshl
	ld	hl, 5120
	ld	e, l
	call	__lcmpu
	ccf
	sbc	a, a
	inc	a
	bit	0, a
	ld	hl, 10
	push	hl
	pop	bc
	jr	nz, BB17_3
	lea	bc, iy
BB17_3:
	bit	0, a
	ld	a, 0
	jr	nz, BB17_5
	ld	a, d
BB17_5:
	ld	(ix - 124), a
	ld	hl, (ix - 121)
	push	hl
	push	bc
	ld	hl, (ix - 117)
	push	hl
	ld	(ix - 127), bc
	call	_fat_ReadFile
	push	hl
	pop	bc
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix - 127)
	ld	e, (ix - 124)
	xor	a, a
	call	__lcmpu
	jp	nz, BB17_9
	ld	hl, (ix - 121)
	ld	hl, (hl)
	ld.sis	de, 19778
	or	a, a
	sbc.sis	hl, de
	jr	nz, BB17_10
	ld	bc, 108
	lea	de, ix - 114
	ld	iy, (ix - 121)
	ld	hl, (iy + 10)
	ld	(ix - 127), hl
	lea	iy, iy + 14
	ld	(ix - 3), bc
	ld	bc, -130
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	lea	hl, iy
	ld	bc, (ix - 3)
	ldir
	ld	hl, (ix - 114)
	ld	e, (ix - 111)
	ld	(ix - 124), hl
	ld	bc, 40
	xor	a, a
	call	__lcmpu
	jr	nc, BB17_14
	ld	hl, _.str.2
	jr	BB17_11
BB17_9:
	ld	hl, _.str.1
	jr	BB17_11
BB17_10:
	ld	hl, _.str.1.2
BB17_11:
	push	hl
	call	_os_PutStrFull
BB17_12:
	pop	hl
	ld	hl, (ix - 121)
	push	hl
	call	__ZdaPv
	pop	hl
	call	_usb_WaitForEvents
	ld	hl, (ix - 117)
	push	hl
	call	_fat_CloseFile
	pop	hl
	ld	hl, (ix - 117)
	push	hl
	call	_free
	pop	hl
BB17_13:
	ld	a, (ix - 118)
	ld	sp, ix
	pop	ix
	ret
BB17_14:
	ld	bc, -134
	lea	hl, ix
	add	hl, bc
	ld	(hl), e
	ld	bc, 3
	ld	de, (ix - 124)
	add	iy, de
	push	ix
	ld	de, -137
	add	ix, de
	ld	(ix), iy
	pop	ix
	ld	hl, (ix - 98)
	ld	e, (ix - 95)
	ld	(ix - 3), bc
	ld	bc, -133
	lea	iy, ix
	add	iy, bc
	ld	(iy), e
	call	__lcmpzero
	ld	bc, (ix - 3)
	jr	z, BB17_17
	push	hl
	pop	iy
	ld	(ix - 3), bc
	push	ix
	ld	bc, -133
	add	ix, bc
	ld	e, (ix)
	pop	ix
	ld	bc, (ix - 3)
	call	__lcmpu
	jp	nz, BB17_24
	ld	hl, 107
	ld	e, a
	ld	bc, (ix - 124)
	ld	(ix - 3), bc
	push	ix
	ld	bc, -134
	add	ix, bc
	ld	a, (ix)
	pop	ix
	ld	bc, (ix - 3)
	call	__lcmpu
	ld	bc, 3
	lea	hl, iy
	jp	nc, BB17_25
BB17_17:
	ld	de, -146
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
	ld	de, -143
	lea	hl, ix
	add	hl, de
	ld	(hl), bc
	ld	de, (ix - 100)
	ld	c, 3
	ld	l, e
	ld	h, d
	call	__sshru
	ld	(ix - 3), de
	push	ix
	ld	de, -152
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	iy, 0
	lea	bc, iy
	ld	de, (ix - 3)
	ld	c, e
	ld	b, d
	push	de
	pop	iy
	xor	a, a
	ld	hl, (ix - 110)
	ld	e, (ix - 107)
	ld	(ix - 124), hl
	ld	(ix - 3), bc
	push	ix
	ld	bc, -134
	add	ix, bc
	ld	(ix), e
	pop	ix
	ld	bc, (ix - 3)
	call	__lmulu
	ld	bc, 31
	call	__ladd
	inc	bc
	call	__ldivs
	ld	c, 2
	call	__ishl
	push	ix
	ld	de, -140
	add	ix, de
	ld	(ix), hl
	pop	ix
	push	ix
	ld	de, -149
	add	ix, de
	ld	(ix), iy
	pop	ix
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	dec.sis	hl
	ld	de, 0
	ld	e, l
	ld	d, h
	ld	bc, 32
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jp	nc, BB17_23
	ld	hl, JTI17_0
	add	hl, de
	add	hl, de
	add	hl, de
	ld	hl, (hl)
	jp	(hl)
BB17_19:
	ld	bc, -146
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, -133
	lea	iy, ix
	add	iy, bc
	ld	e, (iy)
	call	__lcmpzero
	jp	nz, BB17_23
	ld	bc, -140
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	__Znaj
	ld	bc, -155
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	pop	hl
	ld	hl, (ix - 82)
	ld	e, (ix - 79)
	call	__lcmpzero
	jp	nz, BB17_46
	ld	hl, 1
	ld	de, -149
	lea	iy, ix
	add	iy, de
	ld	bc, (iy)
	call	__ishl
	push	ix
	ld	de, -133
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	hl, 2
	call	__ishl
	push	hl
	call	__Znaj
	pop	de
	ld	bc, -146
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	push	ix
	ld	bc, -143
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	bc, -137
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
BB17_22:
	ld	bc, -137
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	push	de
	call	_rgb888to565
	ld	de, -137
	lea	iy, ix
	add	iy, de
	ld	bc, (iy)
	pop	de
	ld	(ix - 3), bc
	push	ix
	ld	bc, -143
	add	ix, bc
	ld	de, (ix)
	pop	ix
	push	de
	pop	iy
	ld	(iy), l
	ld	(iy + 1), h
	ld	bc, (ix - 3)
	push	bc
	pop	iy
	lea	iy, iy + 4
	lea	bc, iy
	ld	(ix - 3), bc
	ld	bc, -133
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	dec	hl
	push	de
	pop	iy
	lea	iy, iy + 2
	push	ix
	ld	de, -143
	add	ix, de
	ld	(ix), iy
	pop	ix
	ld	bc, (ix - 3)
	push	bc
	pop	de
	ld	bc, -133
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB17_22
	jp	BB17_51
BB17_23:
	ld	hl, _.str.5
	jp	BB17_11
BB17_24:
	ld	hl, _.str.3
	jp	BB17_11
BB17_25:
	ld	hl, _.str.4
	jp	BB17_11
BB17_26:
	ld	bc, -140
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	__Znaj
	ld	bc, -155
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	pop	hl
	ld	bc, -146
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	ix
	ld	bc, -133
	add	ix, bc
	ld	e, (ix)
	pop	ix
	call	__lcmpzero
	jp	z, BB17_32
	ld	bc, 31744
	ld	iy, (ix - 74)
	ld	e, (ix - 71)
	ld	hl, (ix - 70)
	ld	(ix - 3), bc
	push	ix
	ld	bc, -133
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	d, (ix - 67)
	ld	hl, (ix - 66)
	push	ix
	ld	bc, -137
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	a, (ix - 63)
	ld	bc, -146
	lea	hl, ix
	add	hl, bc
	ld	(hl), a
	lea	hl, iy
	push	ix
	ld	bc, -158
	add	ix, bc
	ld	(ix), e
	pop	ix
	xor	a, a
	ld	bc, (ix - 3)
	call	__lcmpu
	jp	nz, BB17_39
	ld	bc, 992
	ld	(ix - 3), bc
	ld	bc, -133
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	e, d
	ld	bc, (ix - 3)
	call	__lcmpu
	jp	nz, BB17_39
	ld	bc, -137
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	ix
	ld	bc, -146
	add	ix, bc
	ld	e, (ix)
	pop	ix
	ld	bc, 31
	call	__lcmpu
	jp	nz, BB17_39
	ld	iyh, a
	jp	BB17_59
BB17_31:
	ld	hl, 4
	ld	bc, -143
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	bc, -140
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	__Znaj
	ld	bc, -155
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	pop	hl
	ld	bc, -146
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	ix
	ld	bc, -133
	add	ix, bc
	ld	e, (ix)
	pop	ix
	call	__lcmpzero
	jp	nz, BB17_33
BB17_32:
	ld	iyh, 0
	jp	BB17_59
BB17_33:
	ld	bc, -65536
	ld	hl, (ix - 74)
	ld	e, (ix - 71)
	ld	iyh, b
	ld	a, iyh
	call	__lcmpu
	ld	d, 1
	ld	l, b
	ld	iyl, d
	jr	z, BB17_35
	ex	de, hl
	ld	iyl, e
	ex	de, hl
BB17_35:
	ld	hl, (ix - 70)
	ld	e, (ix - 67)
	ld	bc, 65280
	ld	a, iyh
	call	__lcmpu
	jr	z, BB17_37
	ld	d, 0
BB17_37:
	ld	a, iyl
	rrc	a
	sbc	a, a
	ld	l, a
	rrc	d
	sbc	a, a
	ld	e, a
	ld	a, l
	and	a, e
	ld	d, a
	ld	hl, (ix - 66)
	ld	e, (ix - 63)
	ld	bc, 255
	ld	a, iyh
	call	__lcmpu
	jp	z, BB17_53
	ld	hl, 4
	ld	e, h
	jp	BB17_54
BB17_39:
	ld	bc, -143
	lea	hl, ix
	add	hl, bc
	ld	(hl), d
	push	ix
	ld	bc, -137
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	push	ix
	ld	bc, -146
	add	ix, bc
	ld	e, (ix)
	pop	ix
	ld	bc, 31
	call	__lcmpu
	ld	d, 1
	ld	a, d
	jr	z, BB17_41
	ld	a, 0
BB17_41:
	ld	bc, -137
	lea	hl, ix
	add	hl, bc
	ld	(hl), a
	lea	hl, iy
	ld	bc, -158
	lea	iy, ix
	add	iy, bc
	ld	e, (iy)
	ld	bc, 63488
	ld	iyh, c
	ld	a, iyh
	call	__lcmpu
	ld	a, d
	jr	z, BB17_43
	ld	a, 0
BB17_43:
	ld	iyl, a
	ld	bc, -133
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	ix
	ld	bc, -143
	add	ix, bc
	ld	e, (ix)
	pop	ix
	ld	bc, 2016
	ld	a, iyh
	call	__lcmpu
	jr	z, BB17_45
	ld	d, 0
BB17_45:
	ld	a, iyl
	rrc	a
	sbc	a, a
	ld	l, a
	rrc	d
	sbc	a, a
	ld	e, a
	ld	a, l
	and	a, e
	ld	l, a
	push	ix
	ld	bc, -137
	add	ix, bc
	ld	a, (ix)
	pop	ix
	rrc	a
	sbc	a, a
	ld	e, a
	ld	a, l
	and	a, e
	bit	0, a
	ld	hl, 2
	jp	z, BB17_55
	jp	BB17_56
BB17_46:
	push	hl
	pop	de
	push	hl
	pop	iy
	add	iy, de
	push	ix
	ld	bc, -133
	add	ix, bc
	ld	(ix), hl
	pop	ix
	add	hl, de
	ld	de, -1
	jr	c, BB17_48
	lea	de, iy
BB17_48:
	push	de
	call	__Znaj
	push	hl
	pop	de
	pop	hl
	ld	(ix - 3), de
	ld	de, -133
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	de, (ix - 3)
	ld	(ix - 3), bc
	ld	bc, -146
	lea	iy, ix
	push	af
	add	iy, bc
	pop	af
	ld	(iy), de
	ld	bc, (ix - 3)
	jp	z, BB17_51
	ld	(ix - 3), bc
	ld	bc, -143
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	ld	bc, -137
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	ld	bc, (ix - 3)
BB17_50:
	ld	(ix - 3), de
	ld	de, -133
	lea	hl, ix
	add	hl, de
	ld	(hl), bc
	ld	de, (ix - 3)
	ld	bc, -137
	lea	iy, ix
	add	iy, bc
	ld	(iy), de
	push	de
	call	_rgb888to565
	ld	de, -133
	lea	iy, ix
	add	iy, de
	ld	bc, (iy)
	pop	de
	ld	(ix - 3), bc
	push	ix
	ld	bc, -143
	add	ix, bc
	ld	de, (ix)
	pop	ix
	push	de
	pop	iy
	ld	(iy), l
	ld	(iy + 1), h
	ld	bc, -137
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	lea	iy, iy + 4
	lea	hl, iy
	ld	bc, (ix - 3)
	dec	bc
	push	de
	pop	iy
	lea	iy, iy + 2
	push	ix
	ld	de, -143
	add	ix, de
	ld	(ix), iy
	pop	ix
	ex	de, hl
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB17_50
BB17_51:
	ld.sis	de, 8
	ld	bc, -149
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	or	a, a
	sbc.sis	hl, de
	ld	iyh, d
	jp	z, BB17_57
	ld	hl, 0
	jp	BB17_58
BB17_53:
	ld	e, -1
	ld	hl, 4
BB17_54:
	ld	a, d
	and	a, e
	bit	0, a
	jr	nz, BB17_56
BB17_55:
	ld	hl, 5
BB17_56:
	push	ix
	ld	bc, -143
	add	ix, bc
	ld	(ix), hl
	pop	ix
	jr	BB17_59
BB17_57:
	ld	hl, 1
BB17_58:
	push	ix
	ld	bc, -143
	add	ix, bc
	ld	(ix), hl
	pop	ix
BB17_59:
	ld	bc, 320
	ld	hl, (ix - 124)
	ld	(ix - 3), bc
	push	ix
	ld	bc, -134
	add	ix, bc
	ld	e, (ix)
	pop	ix
	ld	a, iyh
	ld	bc, (ix - 3)
	call	__lcmps
	call	pe, __setflag
	jp	m, BB17_61
	ld	d, 0
	jr	BB17_62
BB17_61:
	ld	d, 1
BB17_62:
	ld	hl, 320
	ld	e, iyh
	ld	bc, (ix - 124)
	ld	(ix - 3), bc
	ld	bc, -134
	lea	iy, ix
	add	iy, bc
	ld	a, (iy)
	ld	bc, (ix - 3)
	call	__lsub
	push	hl
	pop	bc
	ld	a, e
	ld	e, 1
	ld	l, e
	call	__lshru
	bit	0, d
	jr	nz, BB17_64
	ld	bc, 0
BB17_64:
	push	bc
	pop	hl
	ld	c, e
	call	__ishl
	push	hl
	pop	de
	ld	hl, -2730624
	add	hl, de
	ld	de, -133
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
	ld	de, (ix - 106)
	ld	a, (ix - 103)
	push	de
	pop	hl
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ld	(ix - 3), bc
	ld	bc, -137
	lea	iy, ix
	add	iy, bc
	ld	(iy), de
	ex	de, hl
	ld	bc, (ix - 3)
	add	hl, bc
	call	__ixor
	ld	de, 240
	ld	(ix - 3), bc
	push	ix
	ld	bc, -158
	add	ix, bc
	ld	(ix), hl
	pop	ix
	or	a, a
	sbc	hl, de
	ld	bc, (ix - 3)
	jr	nc, BB17_66
	ld	hl, 240
	ld	iyl, 0
	ld	e, iyl
	ld	(ix - 3), de
	push	ix
	ld	de, -137
	add	ix, de
	ld	bc, (ix)
	pop	ix
	ld	de, (ix - 3)
	call	__lsub
	ld	bc, 2
	ld	a, iyl
	call	__ldivs
	ld	bc, -640
	call	__imulu
	push	hl
	pop	de
	ld	(ix - 3), bc
	push	ix
	ld	bc, -133
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	add	hl, de
	push	ix
	ld	de, -133
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	bc, (ix - 3)
	jr	BB17_67
BB17_66:
	ld	iyl, 0
BB17_67:
	ld	a, iyl
	ld	(-2883584), a
	ld	hl, -2883584
	push	hl
	pop	de
	inc	de
	ld	bc, 153599
	ldir
	ld	bc, -137
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	bc, -133
	lea	iy, ix
	push	af
	add	iy, bc
	pop	af
	ld	iy, (iy)
	jp	z, BB17_104
	ld	de, -2729984
	lea	hl, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB17_104
	ld	a, 8
	ld	de, (ix - 124)
	dec	de
	ld	bc, 319
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jr	c, BB17_71
	ld	de, 319
BB17_71:
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	(ix - 3), de
	ld	de, -152
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	c, l
	ld	b, h
	ld	de, -170
	lea	hl, ix
	add	hl, de
	ld	(hl), bc
	ld	c, 1
	ld	hl, (ix - 124)
	call	__ishl
	push	ix
	ld	de, -175
	add	ix, de
	ld	(ix), hl
	pop	ix
	push	ix
	ld	de, -149
	add	ix, de
	ld	hl, (ix)
	pop	ix
	sub	a, l
	push	ix
	ld	de, -171
	add	ix, de
	ld	(ix), a
	pop	ix
	ld	b, 0
	ld	c, l
	scf
	sbc	hl, hl
	call	__ishl
	ld	a, l
	cpl
	dec	de
	lea	hl, ix
	add	hl, de
	ld	(hl), a
	ld	de, (ix - 3)
	ex	de, hl
	ld	c, 1
	call	__ishl
	ld	de, 2
	add	hl, de
	push	ix
	ld	de, -167
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	bc, 0
BB17_72:
	ld	de, -152
	lea	hl, ix
	add	hl, de
	ld	(hl), bc
	push	ix
	ld	bc, -133
	add	ix, bc
	ld	(ix), iy
	pop	ix
	ld	bc, -155
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	push	ix
	ld	bc, -137
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	bc, -140
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	de, (ix - 127)
	ld	iy, (ix - 121)
BB17_73:
	add	iy, de
	ld	(ix - 127), hl
	add	hl, de
	push	ix
	ld	bc, -161
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	bc, -8388608
	add	hl, bc
	ld	bc, -8383487
	or	a, a
	sbc	hl, bc
	jp	c, BB17_79
	ld	hl, 5120
	or	a, a
	sbc	hl, de
	push	ix
	ld	bc, -161
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	hl
	push	iy
	ld	bc, -137
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_memcpy
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	bc, -161
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	ld	bc, -137
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	add	hl, de
	push	ix
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	hl, (ix - 127)
	or	a, a
	sbc	hl, de
	ld	(ix - 127), hl
	ld	hl, (ix - 117)
	push	hl
	call	_fat_GetFileSize
	pop	bc
	ld	bc, 511
	xor	a, a
	call	__ladd
	push	hl
	pop	bc
	ld	a, e
	ld	l, 9
	call	__lshru
	ld	(ix - 3), de
	ld	de, -161
	lea	iy, ix
	add	iy, de
	ld	(iy), bc
	push	ix
	ld	de, -164
	add	ix, de
	ld	(ix), a
	pop	ix
	ld	hl, (ix - 117)
	push	hl
	ld	de, (ix - 3)
	call	_fat_GetFileBlockOffset
	push	hl
	pop	bc
	pop	hl
	xor	a, a
	ld	de, -161
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	(ix - 3), bc
	ld	bc, -164
	lea	iy, ix
	add	iy, bc
	ld	e, (iy)
	ld	bc, (ix - 3)
	call	__lsub
	push	hl
	pop	iy
	ld	d, e
	lea	bc, iy
	ld	a, d
	ld	l, 9
	call	__lshl
	ld	hl, 5120
	ld	e, l
	call	__lcmpu
	ccf
	sbc	a, a
	inc	a
	bit	0, a
	ld	hl, 10
	jr	nz, BB17_76
	lea	hl, iy
BB17_76:
	bit	0, a
	ld	a, 0
	jr	nz, BB17_78
	ld	a, d
BB17_78:
	ld	bc, -164
	lea	iy, ix
	add	iy, bc
	ld	(iy), a
	ld	de, (ix - 121)
	push	de
	push	hl
	push	ix
	ld	bc, -161
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	hl, (ix - 117)
	push	hl
	call	_fat_ReadFile
	ld	iy, (ix - 121)
	push	hl
	pop	bc
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, -161
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	(ix - 3), bc
	push	ix
	ld	bc, -164
	add	ix, bc
	ld	e, (ix)
	pop	ix
	xor	a, a
	ld	bc, (ix - 3)
	call	__lcmpu
	ld	hl, 0
	ex	de, hl
	ld	hl, (ix - 127)
	jp	z, BB17_73
	jp	BB17_106
BB17_79:
	ld	hl, (ix - 127)
	push	hl
	push	iy
	ld	bc, -137
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_memcpy
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	bc, -143
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	a, l
	cp	a, 6
	jr	c, BB17_82
BB17_80:
	ld	bc, -133
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	de, -640
	add	iy, de
	push	ix
	ld	de, -152
	add	ix, de
	ld	bc, (ix)
	pop	ix
	inc	bc
	push	bc
	pop	hl
	ld	(ix - 3), bc
	push	ix
	ld	bc, -158
	add	ix, bc
	ld	de, (ix)
	pop	ix
	or	a, a
	sbc	hl, de
	ld	bc, (ix - 3)
	jp	nc, BB17_104
	lea	hl, iy
	ld	de, -2729984
	or	a, a
	sbc	hl, de
	ld	de, -161
	lea	hl, ix
	push	af
	add	hl, de
	pop	af
	ld	hl, (hl)
	ld	(ix - 127), hl
	jp	c, BB17_72
	jp	BB17_104
BB17_82:
	ld	hl, JTI17_1
	ld	bc, -143
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	add	hl, de
	add	hl, de
	add	hl, de
	ld	hl, (hl)
	jp	(hl)
BB17_83:
	ld	hl, (ix - 124)
	push	hl
	call	__Znaj
	push	hl
	pop	iy
	pop	hl
	ld	de, (ix - 124)
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	push	ix
	ld	bc, -137
	push	af
	add	ix, bc
	pop	af
	ld	(ix), iy
	pop	ix
	ld	(ix - 3), de
	push	ix
	ld	de, -171
	push	af
	add	ix, de
	pop	af
	ld	c, (ix)
	pop	ix
	push	ix
	ld	de, -155
	push	af
	add	ix, de
	pop	af
	ld	hl, (ix)
	pop	ix
	ld	(ix - 127), hl
	ld	de, (ix - 3)
	jp	z, BB17_89
BB17_84:
	ld	(ix - 3), de
	ld	de, -164
	lea	hl, ix
	add	hl, de
	ld	(hl), iy
	or	a, a
	sbc	hl, hl
	ld	iy, (ix - 127)
	ld	l, (iy)
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	call	__ishru
	ld	a, l
	ld	de, -172
	lea	hl, ix
	add	hl, de
	and	a, (hl)
	ld	(iy), a
	ld	a, c
	push	ix
	ld	de, -149
	add	ix, de
	ld	hl, (ix)
	pop	ix
	cp	a, l
	sbc	a, a
	ld	b, a
	push	ix
	ld	de, -178
	add	ix, de
	ld	(ix), b
	pop	ix
	ld	a, c
	sub	a, l
	dec	de
	lea	hl, ix
	add	hl, de
	ld	(hl), a
	ld	a, b
	and	a, 1
	ld	bc, 0
	ld	c, a
	ld	hl, (ix - 127)
	add	hl, bc
	ld	de, (ix - 3)
	ld	(ix - 127), hl
	ld	bc, -178
	lea	hl, ix
	add	hl, bc
	bit	0, (hl)
	ld	(ix - 3), de
	push	ix
	ld	de, -171
	push	af
	add	ix, de
	pop	af
	ld	c, (ix)
	pop	ix
	ld	de, (ix - 3)
	jr	nz, BB17_86
	ld	(ix - 3), de
	ld	de, -179
	lea	hl, ix
	add	hl, de
	ld	c, (hl)
	ld	de, (ix - 3)
BB17_86:
	dec	de
	inc	iy
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	nz, BB17_84
	ld	de, -137
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	ld	iy, 0
	lea	de, iy
BB17_88:
	ld	(ix - 3), bc
	ld	bc, -164
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	ld	bc, (ix - 3)
	ld	(ix - 127), bc
	ld	bc, -133
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	add	hl, de
	push	ix
	ld	de, -178
	add	ix, de
	ld	(ix), hl
	pop	ix
	or	a, a
	sbc	hl, hl
	ld	iy, (ix - 127)
	ld	l, (iy)
	ld	c, 1
	call	__ishl
	push	hl
	pop	de
	ld	(ix - 3), bc
	ld	bc, -146
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	add	hl, de
	ld	hl, (hl)
	push	ix
	ld	bc, -178
	add	ix, bc
	ld	iy, (ix)
	pop	ix
	ld	(iy), l
	ld	(iy + 1), h
	ld	de, 2
	ld	bc, -164
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, de
	ex	de, hl
	ld	bc, (ix - 3)
	ld	bc, (ix - 127)
	inc	bc
	ld	(ix - 3), bc
	ld	bc, -167
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	or	a, a
	sbc	hl, de
	ld	bc, (ix - 3)
	jp	nz, BB17_88
BB17_89:
	ld	bc, -137
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	__ZdaPv
	pop	hl
	jp	BB17_80
BB17_90:
	ld	hl, 320
	ld	e, 0
	ld	bc, (ix - 124)
	ld	(ix - 3), bc
	ld	bc, -134
	lea	iy, ix
	add	iy, bc
	ld	a, (iy)
	ld	bc, (ix - 3)
	call	__lcmps
	call	pe, __setflag
	jp	p, BB17_102
	ld	bc, -133
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	ld	bc, -155
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	ld	bc, 640
	ldir
	jp	BB17_80
BB17_92:
	ld	hl, (ix - 124)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB17_80
	or	a, a
	sbc	hl, hl
	ex	de, hl
BB17_94:
	ld	(ix - 127), de
	ld	bc, -155
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	add	iy, de
	push	ix
	ld	bc, -133
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	add	hl, de
	push	ix
	ld	bc, -137
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	iy
	call	_rgb1555to565
	pop	de
	ld	bc, -137
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	(iy), l
	ld	(iy + 1), h
	ld	de, 2
	ld	hl, (ix - 127)
	add	hl, de
	ex	de, hl
	ld	bc, -167
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	or	a, a
	sbc	hl, de
	jr	nz, BB17_94
	jp	BB17_80
BB17_95:
	ld	hl, (ix - 124)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB17_80
	or	a, a
	sbc	hl, hl
	ex	de, hl
	ld	bc, -155
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
BB17_97:
	ld	bc, -164
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	ld	(ix - 127), iy
	push	ix
	ld	bc, -133
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	add	hl, de
	push	ix
	ld	bc, -137
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	iy
	call	_rgb888to565
	ld	bc, (ix - 127)
	pop	de
	ld	de, -137
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	ld	(iy), l
	ld	(iy + 1), h
	ld	(ix - 3), bc
	ld	bc, -170
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	ld	bc, (ix - 3)
	push	bc
	pop	iy
	add	iy, de
	ld	de, 2
	push	ix
	ld	bc, -164
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	add	hl, de
	ex	de, hl
	ld	bc, -167
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	or	a, a
	sbc	hl, de
	jr	nz, BB17_97
	jp	BB17_80
BB17_98:
	ld	hl, (ix - 124)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB17_80
	ld	de, -155
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	ld	iy, 0
	lea	de, iy
BB17_100:
	ld	(ix - 3), bc
	ld	bc, -137
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	ld	bc, (ix - 3)
	ld	(ix - 127), bc
	ld	bc, -133
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	add	hl, de
	push	ix
	ld	de, -164
	add	ix, de
	ld	(ix), hl
	pop	ix
	or	a, a
	sbc	hl, hl
	ld	iy, (ix - 127)
	ld	l, (iy)
	ld	c, 1
	call	__ishl
	push	hl
	pop	de
	ld	(ix - 3), bc
	ld	bc, -146
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	add	hl, de
	ld	hl, (hl)
	push	ix
	ld	bc, -164
	add	ix, bc
	ld	iy, (ix)
	pop	ix
	ld	(iy), l
	ld	(iy + 1), h
	ld	de, 2
	ld	bc, -137
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, de
	ex	de, hl
	ld	bc, (ix - 3)
	ld	bc, (ix - 127)
	inc	bc
	ld	(ix - 3), bc
	ld	bc, -167
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	or	a, a
	sbc	hl, de
	ld	bc, (ix - 3)
	jp	nz, BB17_100
	jp	BB17_80
BB17_101:
	ld	bc, -130
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -133
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -170
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	hl, (ix - 124)
	push	hl
	ld	bc, -155
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	__Z18displayBitFieldRowPhijPtP16bitmapInfoHeader
	ld	hl, 15
	jr	BB17_103
BB17_102:
	ld	bc, -175
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -155
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -133
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_memcpy
	ld	hl, 9
BB17_103:
	add	hl, sp
	ld	sp, hl
	jp	BB17_80
BB17_104:
	ld	bc, -146
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	push	hl
	call	nz, __ZdaPv
	pop	hl
	ld	a, 1
	ld	(ix - 118), a
BB17_105:
	ld	bc, -155
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	__ZdaPv
	jp	BB17_12
BB17_106:
	ld	hl, _.str.1
	push	hl
	call	_os_PutStrFull
	pop	hl
	ld	bc, -146
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	push	hl
	call	nz, __ZdaPv
	pop	hl
	jr	BB17_105
	section	.text,"ax",@progbits
	section	.rodata,"a",@progbits
	private	JTI17_0
JTI17_0:
	dl	BB17_19
	dl	BB17_19
	dl	BB17_23
	dl	BB17_19
	dl	BB17_23
	dl	BB17_23
	dl	BB17_23
	dl	BB17_19
	dl	BB17_23
	dl	BB17_23
	dl	BB17_23
	dl	BB17_23
	dl	BB17_23
	dl	BB17_23
	dl	BB17_23
	dl	BB17_26
	dl	BB17_23
	dl	BB17_23
	dl	BB17_23
	dl	BB17_23
	dl	BB17_23
	dl	BB17_23
	dl	BB17_23
	dl	BB17_31
	dl	BB17_23
	dl	BB17_23
	dl	BB17_23
	dl	BB17_23
	dl	BB17_23
	dl	BB17_23
	dl	BB17_23
	dl	BB17_31
	private	JTI17_1
JTI17_1:
	dl	BB17_83
	dl	BB17_98
	dl	BB17_90
	dl	BB17_92
	dl	BB17_95
	dl	BB17_101

	section	.text,"ax",@progbits
	public	_main
_main:
	ld	iy, -3145600
	call	_os_ClrLCDFull
	call	_os_HomeUp
	call	_os_DrawStatusBar
	ld	hl, _.str.6
	push	hl
	call	_os_PutStrFull
	pop	hl
	call	_init_USB
	bit	0, a
	jr	z, BB18_8
	ld	hl, _.str.2.8
	ld	de, _.str.3.9
	push	de
	push	hl
	call	__Z13displayBitmapPKcS0_
	ld	hl, 6
	add	hl, sp
	ld	sp, hl
	bit	0, a
	jr	z, BB18_11
	call	_usb_WaitForEvents
	ld	a, (_global+1796)
	bit	0, a
	jr	nz, BB18_12
BB18_3:
	ld	a, (_global+1795)
	bit	0, a
	jr	z, BB18_5
BB18_4:
	ld	hl, _global+3
	push	hl
	call	_msd_Close
	pop	hl
BB18_5:
	call	_usb_Cleanup
BB18_6:
	call	_os_GetCSC
	or	a, a
	jr	z, BB18_6
	or	a, a
	sbc	hl, hl
	ret
BB18_8:
	ld	hl, _.str.1.7
	push	hl
	call	_os_PutStrFull
	pop	hl
BB18_9:
	call	_os_GetCSC
	or	a, a
	jr	z, BB18_9
	ld	hl, 1
	ret
BB18_11:
	ld	hl, _.str.4.10
	push	hl
	call	_os_PutStrFull
	pop	hl
	call	_usb_WaitForEvents
	ld	a, (_global+1796)
	bit	0, a
	jr	z, BB18_3
BB18_12:
	ld	hl, _global+1027
	push	hl
	call	_fat_Close
	pop	hl
	ld	a, (_global+1795)
	bit	0, a
	jr	nz, BB18_4
	jr	BB18_5
	section	.text,"ax",@progbits

	section	.bss,"aw",@nobits
	private	_global
_global:
	rb	1797

	section	.bss,"aw",@nobits
	private	_partitions
_partitions:
	rb	256

	section	.rodata,"a",@progbits
	private	_.str.1
_.str.1:
	db	" !Read failed.!", 0

	section	.rodata,"a",@progbits
	private	_.str.1.2
_.str.1.2:
	db	" !Magic bytes are wrong!", 0

	section	.rodata,"a",@progbits
	private	_.str.2
_.str.2:
	db	" !DIB header too small!", 0

	section	.rodata,"a",@progbits
	private	_.str.3
_.str.3:
	db	" !Compression mode wrong!", 0

	section	.rodata,"a",@progbits
	private	_.str.4
_.str.4:
	db	" !Compression mode or header type wrong!", 0

	section	.rodata,"a",@progbits
	private	_.str.5
_.str.5:
	db	" !Unsupported bit depth!", 0

	section	.rodata,"a",@progbits
	private	_.str.6
_.str.6:
	db	"Attempting to read bitmap, please wait... Press any key to cancel.", 0

	section	.rodata,"a",@progbits
	private	_.str.1.7
_.str.1.7:
	db	" Failed to open USB. Press any key to continue.", 0

	section	.rodata,"a",@progbits
	private	_.str.2.8
_.str.2.8:
	db	"/", 0

	section	.rodata,"a",@progbits
	private	_.str.3.9
_.str.3.9:
	db	"test.bmp", 0

	section	.rodata,"a",@progbits
	private	_.str.4.10
_.str.4.10:
	db	" Press any key to exit.", 0

	ident	"clang version 15.0.0 (https://github.com/jacobly0/llvm-project 005a99ce2569373524bd881207aa4a1e98a2b238)"
	ident	"clang version 15.0.0 (https://github.com/jacobly0/llvm-project 005a99ce2569373524bd881207aa4a1e98a2b238)"
	ident	"clang version 15.0.0 (https://github.com/jacobly0/llvm-project 005a99ce2569373524bd881207aa4a1e98a2b238)"
	extern	__ldivs
	extern	__ZdaPv
	extern	__Unwind_SjLj_Register
	extern	_rgb1555to565
	extern	_toupper
	extern	_usb_WaitForInterrupt
	extern	_fat_GetFileSize
	extern	_usb_ResetDevice
	extern	_fat_Close
	extern	__lcmpzero
	extern	__sshl
	extern	_msd_Read
	extern	_strncpy
	extern	_localtime
	extern	_strncat
	extern	_rgb888to565
	extern	_os_DrawStatusBar
	extern	_memcpy
	extern	__ishl
	extern	__ladd
	extern	_msd_Open
	extern	__sshru
	extern	_strlen
	extern	__setflag
	extern	_msd_FindPartitions
	extern	__Znaj
	extern	_fat_ReadFile
	extern	__ixor
	extern	_fat_WriteFile
	extern	_os_PutStrFull
	extern	_fat_Open
	extern	_fat_Delete
	extern	_os_GetCSC
	extern	_usb_WaitForEvents
	extern	_free
	extern	__lshru
	extern	_time
	extern	_usb_Cleanup
	extern	_os_HomeUp
	extern	_msd_Close
	extern	_fat_Create
	extern	_fat_SetFileSize
	extern	_fat_CloseFile
	extern	__lsub
	extern	__indcallhl
	extern	__lmulu
	extern	__ishru
	extern	__Unwind_SjLj_Unregister
	extern	__lshl
	extern	__land
	extern	__imulu
	extern	_fat_OpenFile
	extern	_calloc
	extern	_msd_Info
	extern	__lcmps
	extern	__lcmpu
	extern	_os_ClrLCDFull
	extern	_fat_GetFileBlockOffset
	extern	_msd_Write
	extern	_usb_Init
